using Content.Server.Chat.Systems;
using Robust.Shared.Random;
using Content.Shared.Damage;
using Content.Server.Body.Components;
using Content.Shared.Chemistry.Components;
using Content.Server.Fluids.EntitySystems;
using Content.Shared.Mobs.Systems;
using Content.Shared.ADT.Silicon.Components;
using Robust.Shared.Prototypes;
using Content.Shared.Chat;
using System.Threading;

namespace Content.Server.ADT.BloodCough;

public sealed class BloodCoughSystem : EntitySystem
{
    [Dependency] private readonly ChatSystem _chat = default!;
    [Dependency] private readonly IRobustRandom _random = default!;
    [Dependency] private readonly PuddleSystem _puddleSystem = default!;
    [Dependency] private readonly MobStateSystem _mobState = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public override void Initialize()
    {
        base.Initialize();
        SubscribeLocalEvent<BloodCoughComponent, DamageChangedEvent>(OnMobStateDamage);
        SubscribeLocalEvent<BloodCoughComponent, ComponentStartup>(OnComponentStartup);
        SubscribeLocalEvent<BloodCoughComponent, ComponentShutdown>(OnComponentShutdown);
        SubscribeLocalEvent<BloodCoughComponent, AfterAutoHandleStateEvent>(OnAfterAutoHandleState);
    }

    private void OnComponentStartup(EntityUid uid, BloodCoughComponent component, ComponentStartup args)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        CheckAndUpdateCoughState(uid, component);
    }

    private void OnComponentShutdown(EntityUid uid, BloodCoughComponent component, ComponentShutdown args)
    {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (component.TokenSource != null)
        {
            component.TokenSource.Cancel();
            component.TokenSource.Dispose();
            component.TokenSource = null;
        }
    }

    private void OnAfterAutoHandleState(EntityUid uid, BloodCoughComponent component, ref AfterAutoHandleStateEvent args)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—à–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        CheckAndUpdateCoughState(uid, component);
    }

    private void OnMobStateDamage(EntityUid uid, BloodCoughComponent component, DamageChangedEvent args)
    {
        CheckAndUpdateCoughState(uid, component);
    }

    private void CheckAndUpdateCoughState(EntityUid uid, BloodCoughComponent component)
    {
        if (!EntityManager.TryGetComponent<DamageableComponent>(uid, out var damageable))
        {
            Log.Debug($"–°—É—â–Ω–æ—Å—Ç—å {ToPrettyString(uid)} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ DamageableComponent.");
            return;
        }

        var damagePerGroup = damageable.Damage.GetDamagePerGroup(_prototypeManager);
        if (!damagePerGroup.TryGetValue("Brute", out var bruteDamage))
            return;

        var shouldCough = bruteDamage >= 70 && bruteDamage <= 100;

        if (component.CheckCoughBlood != shouldCough)
        {
            component.CheckCoughBlood = shouldCough;

            if (shouldCough)
            {
                StartCoughTimer(uid, component);
            }
            else
            {
                StopCoughTimer(uid, component);
            }
        }
    }

    private void StartCoughTimer(EntityUid uid, BloodCoughComponent component)
    {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        component.TokenSource?.Cancel();
        component.TokenSource?.Dispose();
        component.TokenSource = new CancellationTokenSource();

        var delay = _random.Next(component.CoughTimeMin, component.CoughTimeMax);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä
        uid.SpawnRepeatingTimer(TimeSpan.FromSeconds(delay), () => OnCoughTimerFired(uid, component), component.TokenSource.Token);
    }

    private void StopCoughTimer(EntityUid uid, BloodCoughComponent component)
    {
        if (component.TokenSource != null)
        {
            component.TokenSource.Cancel();
            component.TokenSource.Dispose();
            component.TokenSource = null;
        }
    }

    private void OnCoughTimerFired(EntityUid uid, BloodCoughComponent component)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!HasComp<BloodCoughComponent>(uid))
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É—â–Ω–æ—Å—Ç—å –∂–∏–≤–∞
        if (!_mobState.IsAlive(uid))
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–Ω –≤—Å–µ –µ—â–µ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if (!EntityManager.TryGetComponent<DamageableComponent>(uid, out var damageable))
            return;

        var damagePerGroup = damageable.Damage.GetDamagePerGroup(_prototypeManager);
        if (!damagePerGroup.TryGetValue("Brute", out var bruteDamage))
            return;

        if (bruteDamage < 70 || bruteDamage > 100)
        {
            component.CheckCoughBlood = false;
            StopCoughTimer(uid, component);
            return;
        }

        PerformCough(uid, component);
    }

    private void PerformCough(EntityUid uid, BloodCoughComponent component)
    {
        if (component.PostingSayDamage != null)
        {
            _chat.TrySendInGameICMessage(uid, Loc.GetString(component.PostingSayDamage), InGameICChatType.Emote, ChatTransmitRange.HideChat);

            if (TryComp<BloodstreamComponent>(uid, out var bloodId) &&
                !TryComp<SiliconComponent>(uid, out var _))
            {
                Solution blood = new();
                blood.AddReagent(bloodId.BloodReagent, 1);
                _puddleSystem.TrySpillAt(uid, blood, out _, sound: false);
            }
        }
    }
}

/*
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   Schr√∂dinger's Cat Code   üêæ      ‚ïë
    ‚ïë   /\_/\\                           ‚ïë
    ‚ïë  ( o.o )  Meow!                    ‚ïë
    ‚ïë   > ^ <                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

*/
