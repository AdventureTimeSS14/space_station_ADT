using System.Threading;
using Content.Server.Chat.Systems;
using Content.Shared.Chat;
using Content.Shared.Mobs;
using Robust.Shared.Random;

namespace Content.Server.ADT.AutoPostingChat;

public sealed class AutoEmotePostingChatSystem : EntitySystem
{
    [Dependency] private readonly ChatSystem _chat = default!;
    [Dependency] private readonly IRobustRandom _random = default!;

    public override void Initialize()
    {
        base.Initialize();
        SubscribeLocalEvent<AutoEmotePostingChatComponent, MobStateChangedEvent>(OnMobState);
        SubscribeLocalEvent<AutoEmotePostingChatComponent, ComponentShutdown>(OnComponentShutdown);
        SubscribeLocalEvent<AutoEmotePostingChatComponent, ComponentStartup>(OnComponentStartup);
    }

    /// <summary>
    /// On death removes active comps and gives genetic damage to prevent cloning, reduce this to allow cloning.
    /// </summary>
    private void OnMobState(EntityUid uid, AutoEmotePostingChatComponent component, MobStateChangedEvent args)
    {
        if (args.NewMobState == MobState.Dead)
        {
            RemComp<AutoEmotePostingChatComponent>(uid);
        }
    }

    private void OnComponentStartup(EntityUid uid, AutoEmotePostingChatComponent component, ComponentStartup args)
    {
        StartEmoteTimer(uid, component);
    }

    private void OnComponentShutdown(EntityUid uid, AutoEmotePostingChatComponent component, ComponentShutdown args)
    {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (component.TokenSource != null)
        {
            component.TokenSource.Cancel();
            component.TokenSource.Dispose();
            component.TokenSource = null;
        }
    }

    private void StartEmoteTimer(EntityUid uid, AutoEmotePostingChatComponent component)
    {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        component.TokenSource?.Cancel();
        component.TokenSource?.Dispose();
        component.TokenSource = new CancellationTokenSource();

        var delay = component.EmoteTimerRead;
        if (component.RandomIntervalEmote)
        {
            delay = _random.Next(component.IntervalRandomEmoteMin, component.IntervalRandomEmoteMax);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä
        uid.SpawnRepeatingTimer(TimeSpan.FromSeconds(delay), () => OnEmoteTimerFired(uid, component), component.TokenSource.Token);
    }

    private void OnEmoteTimerFired(EntityUid uid, AutoEmotePostingChatComponent component)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!HasComp<AutoEmotePostingChatComponent>(uid))
            return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (component.PostingMessageEmote != null)
        {
            _chat.TrySendInGameICMessage(uid, component.PostingMessageEmote, InGameICChatType.Emote, ChatTransmitRange.Normal);
        }

        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –Ω–æ–≤—ã–º —Å–ª—É—á–∞–π–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        if (component.RandomIntervalEmote)
        {
            StartEmoteTimer(uid, component);
        }
    }
}

/*
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   Schr√∂dinger's Cat Code   üêæ      ‚ïë
    ‚ïë   /\_/\\                           ‚ïë
    ‚ïë  ( o.o )  Meow!                    ‚ïë
    ‚ïë   > ^ <                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

*/
