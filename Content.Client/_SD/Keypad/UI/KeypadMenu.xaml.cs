using System;
using System.Collections.Generic;
using Content.Shared._SD.Keypad;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._SD.Keypad.UI;

[GenerateTypedNameReferences]
public sealed partial class KeypadMenu : DefaultWindow
{
    public event Action<int>? OnKeypadButtonPressed;
    public event Action? OnClearButtonPressed;
    public event Action? OnEnterButtonPressed;
    public event Action? OnCancelButtonPressed;

    private readonly List<Label> _codeLabels;
    private KeypadState _currentState = KeypadState.Normal;

    public KeypadMenu()
    {
        RobustXamlLoader.Load(this);

        _codeLabels = new List<Label> { CodeDigit1, CodeDigit2, CodeDigit3, CodeDigit4 };

        Button0.OnPressed += _ => OnKeypadButtonPressed?.Invoke(0);
        Button1.OnPressed += _ => OnKeypadButtonPressed?.Invoke(1);
        Button2.OnPressed += _ => OnKeypadButtonPressed?.Invoke(2);
        Button3.OnPressed += _ => OnKeypadButtonPressed?.Invoke(3);
        Button4.OnPressed += _ => OnKeypadButtonPressed?.Invoke(4);
        Button5.OnPressed += _ => OnKeypadButtonPressed?.Invoke(5);
        Button6.OnPressed += _ => OnKeypadButtonPressed?.Invoke(6);
        Button7.OnPressed += _ => OnKeypadButtonPressed?.Invoke(7);
        Button8.OnPressed += _ => OnKeypadButtonPressed?.Invoke(8);
        Button9.OnPressed += _ => OnKeypadButtonPressed?.Invoke(9);

        ClearButton.OnPressed += _ =>
        {
            if (_currentState == KeypadState.Normal)
                OnClearButtonPressed?.Invoke();
            else
                OnCancelButtonPressed?.Invoke();
        };
        EnterButton.OnPressed += _ => OnEnterButtonPressed?.Invoke();
    }

    /// <summary>
    /// Обновляет состояние UI на основе данных с сервера.
    /// </summary>
    public void UpdateState(KeypadUISate state)
    {
        _currentState = state.State;
        var code = state.CurrentCode;
        for (var i = 0; i < _codeLabels.Count; i++)
        {
            _codeLabels[i].Text = i < code.Length ? code[i].ToString() : "-";
        }

        if (_currentState != KeypadState.Normal)
            ClearButton.Text = "B";
        else
            ClearButton.Text = "C";

        if (StatusLabel is not null)
        {
            switch (state.State)
            {
                case KeypadState.AwaitingOldCode:
                    StatusLabel.Text = Loc.GetString("keypad-ui-enter-old-code");
                    break;
                case KeypadState.AwaitingNewCode:
                    StatusLabel.Text = Loc.GetString("keypad-ui-enter-new-code");
                    break;
                default:
                    StatusLabel.Text = string.Empty;
                    break;
            }
        }
    }
}
