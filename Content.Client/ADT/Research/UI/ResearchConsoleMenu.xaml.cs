using System.Linq;
using System.Numerics;
using Content.Client.Research;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Systems;
using Content.Shared.ADT.Research;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Research.UI;

//
//
//                    Дискорд автора - @_kote
//            Не забудьте упомянуть, если берёте себе :)
//
//
//                                ███████
//                               ███   █████
//                              ███        ████
//                             ███            █████
//                            ███                █████
//                           ███                    █████
//                          ███                        ████
//                          ███                           ████             ███
//                         ███     █████                    █████       ████ ██
//                         ██     ████████                     ███████████  ███
//                        ███     █████████                        █████   ███  ████████████████
//                        ██     ███████████                    ████       ██████████       ████
//                       ███     ███████████                ████         ████             █████████████          ███████        ███████
//                      ███     █████████████             ███                           █████████████████████████████████████████████████████████████
//                      ███    ███████████████                                                    ███                                              ███
//                     ███     ████████████████                                                        ██                                            ██
//                     ███    ███████████████████                                                    ███████                                         ██
//                    ███     ██████████████████                                                        ██                                           ██
//                    ███    █████████████████                                                             ██                                        ██
//                    ██     ██████████████                                                                  ██                                      ██
//                    ██    ████████████                                                                                                  █████     ██
//                   ███    ███████████                                                                                              █████████     ███
//                    ██    ██████████                                                                                         ███████████████    ███
//                    ██    █████████                                                                                ████████████████████████     ███
//                    ███    ██████                                                                                   █████████████████████     ███
//                    ███     ████                                                                                      █████████████████     ███
//                    ███      █                                                                                        ████████████████    ████
//                     ██     █                                                                                        ████████████████    ███
//                     ███                                                                                            ███████████████    ████
//                     ███                                                                                            █████████████     ███
//                      ██               ██                                                                         ██████████████    ███
//                      ███             ██      ███████████████████████                       ███████████████████   ███████████     ███
//            █████      ███            █       ███████████████████████                      █    ███████████████   █████████    ████
//        ████████████    ███           █        ██████████████████████                     ██     ███████████████  ████       ████
//      ███         ███    ███          █        ██████████████████████                     ██     ███████████████  █      ██████
//     ███           ███    ███         █        █████████████████████                      ██     ██████████████   █    ████           ██
//    ███             ███    ███        █       ██████████████████████                      ██     ██████████████   █  ████         ██████████
//    ██               ██     ███       ██     ██████████████████████                        █     █████████████   █████          ████      ███
//   ███     ██    █   ███    ███        ███████████████████████████                         ██    ████████████   ███           ███          ███
//  ███     ████ █████  ███    ███        ████████████████████████                            ████████████████    ███         ████            ███
//  ███     ██████████   ███  █████         ████████████████████                                ████████████     ████        ███               ██
//  ██    ██████████████ ███ ███████          ███████████████                                                    █████      ███       ████     ███
// ███  ████ ███ ████████ ███ ████                                                                               ██████    ███       █████████████
// ███  █████ █████ ██████ ██████████                                                                               ███   ███    ██████████████ ██
// ██   █████████████████  █████                                             █     █    █                          ███   ███   ████████████████ ███
// ██   ████ ██████████    █████                                              █████ ████                         ████   ███   ███████ █████████ ███
// ██      ████████████    ████████                                                                             ███     ███    ████ ███████ ████ ██
// ██      ████████████    ███   ████████                                                                    ████       ██        ██████████████ ██
// ██      ████████████    ███        ███████  ██                                                         ██ ███       ███      ███████████████████
// ███     ███████        ███            ████████████                                                  ████████         ██      ████████████   ███
// ███                    ███                      ████████                                   ██    ██████              ███      ██████████   ███
//  ████                  ██                        ████     ████  ██████                 ████████████                   ████                ███
//     █████              ███                 █████████████               ███████████████   ██████████                     ███              ███
//        ███              ███              ████████                                                 ███                   ██            █████
//         ███             ████              ███                                                    ██████                ███           ███
//         ███               ███              ████                                               ███  ████               ███           ███
//          ███               ███               ███                                          ███        ████             ██            ███
//           ███                ███               █████                                       ██          ███           ███           ███
//            ████                ████            ████                                       ██████       ████         ███            ███
//              ████████████         ██████      █████                                                      ███      ███             ███
//            █████              ███     ████████████                                   ██████               ██████████              ███
//           ███                    ███          ██                              ██████████    ███             █ ███                ███
//          ███                        ██     ███                         ███████               █ ████████      █                  ███████████
//         ███                            █ ██ ██                    █████                       █    ██ ███     █                ████    █████████
//        ███                              ██ ██            ███   ███                            ██         ████  ██        ████                 ████
//       ███                                 ██             █  ███                               ██            ██  ██    ██                        ███
//       ███                                  ██            ██                                 ███                  ████                           ███
//       ███          █                         █         ██                                  █  ████                █              ████            ██
//       ███          ██                         ██     █                                    ███████                 ██         ██                  ██
//       ███           ██                         ██   █                                            ██                █      ██                     ███
//        ██             █                         █                                                 █                 █    ██                       ██
//         ██             █                        ██                                                ██                █   █                         ███
//         ████             ███                    ██                                                ██               ██  █                          ██
//           ███               █████              ██                                             █████                █   █                         ███
//            ███                 ████████████████                                        ████         ███            █  ██                        ███
//              ████                         ██                                        ██████████                    █   █                       ████
//                 ████                        ██                                  ████████     █████               ███████                      ███
//                   █████████████████████████████                           █████████            ███████████████████  ███                     ███
//                                              ███████                  ██████                       ████████████      ██                   ███
//                                                 ██████            ██████                                             ██                 ████
//                                                    █████████████████                                                 ███             █████
//                                                                                                                       ██          █████
//                                                                                                                        █████████████
[GenerateTypedNameReferences]
public sealed partial class ResearchConsoleMenu : FancyWindow
{
    public Action<string>? OnTechnologyCardPressed;
    public Action? OnServerButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;

    /// <summary>
    /// Uid консоли
    /// </summary>
    public EntityUid Entity;

    /// <summary>
    /// Выбранная ветка
    /// </summary>
    public ProtoId<TechDisciplinePrototype> CurrentDiscipline = "Industrial";

    /// <summary>
    /// Выбранное исследование
    /// </summary>
    public ProtoId<TechnologyPrototype>? CurrentTech;

    /// <summary>
    /// Список всех технологий и их доступности
    /// </summary>
    public Dictionary<string, ResearchAvailablity> List = new();

    /// <summary>
    /// Немножко костыль, но хранит в себе последний применённый стейт
    /// </summary>
    private ResearchConsoleBoundInterfaceState _localState = new(0, new());

    /// <summary>
    /// Перетаскивается ли в данный момент меню с исследованиями
    /// </summary>
    private bool _draggin;

    /// <summary>
    /// Позиция всех исследований в ui
    /// </summary>
    private Vector2 _position = new Vector2(45, 250);

    public ResearchConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();
        StaticSprite.SetFromSpriteSpecifier(new SpriteSpecifier.Rsi(new("ADT/Interface/rnd_nt.rsi"), "rnd_nt"), new(2));

        ServerButton.OnPressed += _ => OnServerButtonPressed?.Invoke();
        DragContainer.OnKeyBindDown += args => OnKeybindDown(args);
        DragContainer.OnKeyBindUp += args => OnKeybindUp(args);
        RecenterButton.OnPressed += _ => Recenter();
    }

    public void SetEntity(EntityUid entity)
    {
        Entity = entity;
    }

    public void UpdatePanels(ResearchConsoleBoundInterfaceState state)
    {
        DragContainer.DisposeAllChildren();
        DisciplinesContainer.DisposeAllChildren();
        List = state.Researches;
        _localState = state;

        // Добавляем к верхней панели все дисциплины
        var disciplines = _prototype.EnumeratePrototypes<TechDisciplinePrototype>()
                .ToList()
                .OrderBy(x => x.UiName);

        foreach (var proto in disciplines)
        {
            var discipline = new DisciplineButton(proto)
            {
                ToggleMode = true,
                HorizontalExpand = true,
                VerticalExpand = true,
                MuteSounds = true,  // звуки глушатся по причине не очень понятного мне бага, из-за которого при закрытии меню ими срёт
                Text = Loc.GetString(proto.UiName),
                Margin = new(5)
            };

            discipline.SetClickPressed(proto.ID == CurrentDiscipline);
            DisciplinesContainer.AddChild(discipline);

            discipline.OnPressed += SelectDiscipline;
        }

        foreach (var tech in _prototype.EnumeratePrototypes<TechnologyPrototype>().Where(x => x.Discipline == CurrentDiscipline))
        {
            if (!List.ContainsKey(tech.ID))
                continue;

            var control = new ResearchConsoleItem(tech, _sprite, List[tech.ID]);
            DragContainer.AddChild(control);

            // Двигаем технологии по своим местам
            LayoutContainer.SetPosition(control, _position + tech.Position * 150);
            control.SelectAction += SelectTech;

            // Выбираем для "обновления" превью
            if (tech.ID == CurrentTech)
                SelectTech(tech, List[tech.ID]);
        }
    }

    public void UpdateInformationPanel(ResearchConsoleBoundInterfaceState state)
    {
        var amountMsg = new FormattedMessage();
        amountMsg.AddMarkupOrThrow(Loc.GetString("research-console-menu-research-points-text",
            ("points", state.Points)));
        ResearchAmountLabel.SetMessage(amountMsg);

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        TierDisplayContainer.DisposeAllChildren();
        foreach (var disciplineId in database.SupportedDisciplines)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
            var percentage = _research.GetHighestDisciplineTier(database, discipline);

            var texture = new TextureRect
            {
                TextureScale = new Vector2(2, 2),
                VerticalAlignment = VAlignment.Center
            };
            var label = new RichTextLabel();
            texture.Texture = _sprite.Frame0(discipline.Icon);
            label.SetMessage(Loc.GetString("research-console-tier-percentage", ("perc", percentage)));

            var control = new BoxContainer
            {
                Children =
                {
                    texture,
                    label,
                    new Control
                    {
                        MinWidth = 10
                    }
                }
            };
            TierDisplayContainer.AddChild(control);
        }
    }

    #region Drag handle
    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (_draggin)
        {
            _position += args.Relative;

            // Двигаем технологии в соответствии с движением мыши
            foreach (var child in DragContainer.Children)
            {
                LayoutContainer.SetPosition(child, child.Position + args.Relative);
            }
        }
    }

    /// <summary>
    /// Вызывается по нажатии ЛКМ по <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = true;
    }

    /// <summary>
    /// Вызывается по отжатии ЛКМ с <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = false;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return _draggin ? DragMode.None : base.GetDragModeFor(relativeMousePos);
    }
    #endregion

    /// <summary>
    /// Выбирает определённую технологию
    /// </summary>
    /// <param name="proto">Прототип технологии</param>
    /// <param name="avaibility">Доступность технологии</param>
    public void SelectTech(TechnologyPrototype proto, ResearchAvailablity avaibility)
    {
        InfoContainer.DisposeAllChildren();
        if (!_player.LocalEntity.HasValue)
            return;

        CurrentTech = proto.ID;
        var control = new TechnologyInfoPanel(proto, _sprite, _accessReader.IsAllowed(_player.LocalEntity.Value, Entity), avaibility);
        control.BuyAction += args => OnTechnologyCardPressed?.Invoke(args.ID);
        InfoContainer.AddChild(control);
    }

    /// <summary>
    /// Выбирает определённую дисциплину и обновляет UI
    /// </summary>
    public void SelectDiscipline(BaseButton.ButtonEventArgs args)
    {
        if (args.Button is not DisciplineButton discipline)
            return;
        var proto = discipline.Proto;

        CurrentDiscipline = proto.ID;
        discipline.SetClickPressed(false);
        UserInterfaceManager.ClickSound();
        UpdatePanels(_localState);
        Recenter();
    }

    /// <summary>
    /// Устанавливает стандартную позицию для всех элементов в <see cref="DragContainer"/>
    /// </summary>
    public void Recenter()
    {
        _position = new(45, 250);
        foreach (var item in DragContainer.Children)
        {
            if (item is not ResearchConsoleItem research)
                continue;
            LayoutContainer.SetPosition(item, _position + (research.Prototype.Position * 150));
        }
    }

    public override void Close()
    {
        base.Close();
    }

    protected override void Dispose(bool disposing)
    {
        InfoContainer.DisposeAllChildren();
        foreach (var item in DisciplinesContainer.Children)
        {
            if (item is not DisciplineButton button)
                continue;
            button.OnPressed -= SelectDiscipline;
        }
        base.Dispose(disposing);
    }

    private sealed partial class DisciplineButton(TechDisciplinePrototype proto) : Button
    {
        public TechDisciplinePrototype Proto = proto;
    }
}

