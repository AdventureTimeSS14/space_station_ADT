using System.Linq;
using System.Numerics;
using Content.Client.ADT.Research.UI;
using Content.Client.Interaction;
using Content.Client.Research;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class ResearchConsoleMenu : FancyWindow
{
    public Action<string>? OnTechnologyCardPressed;
    public Action? OnServerButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;
    private bool _draggin;
    protected Vector2 StartDragPosition;
    public Vector2 Offset = Vector2.Zero;
    public Vector2 OldOffset = Vector2.Zero;
    public int Points;
    public EntityUid Entity;

    public ResearchConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Points = 0;
        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();

        ServerButton.OnPressed += _ => OnServerButtonPressed?.Invoke();
    }

    public void SetEntity(EntityUid entity)
    {
        Entity = entity;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (OldOffset == Offset)
            return;

        OldOffset = Offset;
        foreach (var item in DragContainer.Children)
        {
            LayoutContainer.SetPosition(item, Offset);
        }
    }

    public void UpdatePanels()
    {
        DragContainer.Children.Clear();

        var availableTech = _research.GetAvailableTechnologies(Entity);
        //SyncTechnologyList(AvailableCardsContainer, availableTech);

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        var hasAccess = _player.LocalEntity is not { } local ||
                        !_entity.TryGetComponent<AccessReaderComponent>(Entity, out var access) ||
                        _accessReader.IsAllowed(local, Entity, access);

        var testcontrol = new Button();
        DragContainer.AddChildElement(testcontrol);

        foreach (var tech in _prototype.EnumeratePrototypes<TechnologyPrototype>())
        {
            //var tech = _prototype.Index<TechnologyPrototype>(techId);

            //var control = new ResearchConsoleItem(techId, _sprite);
            var control = new Button();
            DragContainer.AddChild(control);
            LayoutContainer.SetPosition(control, tech.Position);
        }

        var unlockedTech = database.UnlockedTechnologies.Select(x => _prototype.Index<TechnologyPrototype>(x));
        //SyncTechnologyList(UnlockedCardsContainer, unlockedTech);
    }

    public void UpdateInformationPanel(ResearchConsoleBoundInterfaceState state)
    {
        var amountMsg = new FormattedMessage();
        amountMsg.AddMarkupOrThrow(Loc.GetString("research-console-menu-research-points-text",
            ("points", state.Points)));
        ResearchAmountLabel.SetMessage(amountMsg);

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        var disciplineText = Loc.GetString("research-discipline-none");
        var disciplineColor = Color.Gray;
        if (database.MainDiscipline != null)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(database.MainDiscipline);
            disciplineText = Loc.GetString(discipline.Name);
            disciplineColor = discipline.Color;
        }

        var msg = new FormattedMessage();
        msg.AddMarkupOrThrow(Loc.GetString("research-console-menu-main-discipline",
            ("name", disciplineText), ("color", disciplineColor)));
        MainDisciplineLabel.SetMessage(msg);

        TierDisplayContainer.Children.Clear();
        foreach (var disciplineId in database.SupportedDisciplines)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
            var tier = _research.GetHighestDisciplineTier(database, discipline);

            // don't show tiers with no available tech
            if (tier == 0)
                continue;

            // i'm building the small-ass control here to spare me some mild annoyance in making a new file
            var texture = new TextureRect
            {
                TextureScale = new Vector2( 2, 2 ),
                VerticalAlignment = VAlignment.Center
            };
            var label = new RichTextLabel();
            texture.Texture = _sprite.Frame0(discipline.Icon);
            label.SetMessage(Loc.GetString("research-console-tier-info-small", ("tier", tier)));

            var control = new BoxContainer
            {
                Children =
                {
                    texture,
                    label,
                    new Control
                    {
                        MinWidth = 10
                    }
                }
            };
            TierDisplayContainer.AddChild(control);
        }
    }

    public void UpdatePoints(int points)
    {
        Points = points;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.None;
    }
}
