using System.Linq;
using System.Numerics;
using Content.Client.ADT.Research.UI;
using Content.Client.Interaction;
using Content.Client.Research;
using Content.Client.Research.UI;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class ResearchConsoleMenu : FancyWindow
{
    public Action<string>? OnTechnologyCardPressed;
    public Action? OnServerButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IClyde _clyde = default!;
    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;

    public ProtoId<TechDisciplinePrototype> CurrentDiscipline = "Industrial";
    public List<string> List = new();
    private bool _draggin;
    public int Points;
    public EntityUid Entity;
    private Vector2 _position = new Vector2(45, 250);
    private IRenderTexture? _staticTexture;

    public ResearchConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Points = 0;
        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();
        _staticTexture = _clyde.CreateRenderTarget((Vector2i)DragContainer.Size,
                new RenderTargetFormatParameters(RenderTargetColorFormat.Rgba8Srgb),
                name: "console-static");
        ResearchesContainer.PanelOverride = new StyleBoxTexture()
        {
            Texture = _staticTexture.Texture,
        };


        ServerButton.OnPressed += _ => OnServerButtonPressed?.Invoke();
        DragContainer.OnKeyBindDown += args => OnKeybindDown(args);
        DragContainer.OnKeyBindUp += args => OnKeybindUp(args);
        RecenterButton.OnPressed += _ => Recenter();
    }

    public void SetEntity(EntityUid entity)
    {
        Entity = entity;
    }

    public void UpdatePanels(ResearchConsoleBoundInterfaceState state)
    {
        DragContainer.DisposeAllChildren();
        DisciplinesContainer.DisposeAllChildren();
        List = state.AllowedPrototypes;

        var disciplines = _prototype.EnumeratePrototypes<TechDisciplinePrototype>().ToList();
        disciplines.Sort((x, y) => x.UiName[0].CompareTo(y.UiName));

        foreach (var proto in disciplines)
        {
            var discipline = new DisciplineButton(proto, state)
            {
                ToggleMode = true,
                HorizontalExpand = true,
                VerticalExpand = true,
                MuteSounds = true,
                Text = Loc.GetString(proto.UiName),
                Margin = new(5)
            };
            discipline.SetClickPressed(proto.ID == CurrentDiscipline);
            DisciplinesContainer.AddChild(discipline);

            discipline.OnPressed += Select;
        }

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        var hasAccess = _player.LocalEntity is not { } local ||
                        !_entity.TryGetComponent<AccessReaderComponent>(Entity, out var access) ||
                        _accessReader.IsAllowed(local, Entity, access);

        foreach (var tech in _prototype.EnumeratePrototypes<TechnologyPrototype>().Where(x => x.Discipline == CurrentDiscipline))
        {
            var control = new ResearchConsoleItem(tech, _sprite, List.Contains(tech.ID));
            control.Main.PanelOverride = new StyleBoxFlat(Color.DarkSlateBlue);
            DragContainer.AddChild(control);
            LayoutContainer.SetPosition(control, _position + (tech.Position * 150));
            control.BuyAction += args => Select(args);
        }

        var unlockedTech = database.UnlockedTechnologies.Select(x => _prototype.Index<TechnologyPrototype>(x));
        //SyncTechnologyList(UnlockedCardsContainer, unlockedTech);
    }

    public void UpdateInformationPanel(ResearchConsoleBoundInterfaceState state)
    {
        var amountMsg = new FormattedMessage();
        amountMsg.AddMarkupOrThrow(Loc.GetString("research-console-menu-research-points-text",
            ("points", state.Points)));
        ResearchAmountLabel.SetMessage(amountMsg);

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        var disciplineText = Loc.GetString("research-discipline-none");
        var disciplineColor = Color.Gray;
        if (database.MainDiscipline != null)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(database.MainDiscipline);
            disciplineText = Loc.GetString(discipline.Name);
            disciplineColor = discipline.Color;
        }

        var msg = new FormattedMessage();
        msg.AddMarkupOrThrow(Loc.GetString("research-console-menu-main-discipline",
            ("name", disciplineText), ("color", disciplineColor)));
        MainDisciplineLabel.SetMessage(msg);

        TierDisplayContainer.DisposeAllChildren();
        foreach (var disciplineId in database.SupportedDisciplines)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
            var tier = _research.GetHighestDisciplineTier(database, discipline);

            // don't show tiers with no available tech
            if (tier == 0)
                continue;

            // i'm building the small-ass control here to spare me some mild annoyance in making a new file
            var texture = new TextureRect
            {
                TextureScale = new Vector2(2, 2),
                VerticalAlignment = VAlignment.Center
            };
            var label = new RichTextLabel();
            texture.Texture = _sprite.Frame0(discipline.Icon);
            label.SetMessage(Loc.GetString("research-console-tier-info-small", ("tier", tier)));

            var control = new BoxContainer
            {
                Children =
                {
                    texture,
                    label,
                    new Control
                    {
                        MinWidth = 10
                    }
                }
            };
            TierDisplayContainer.AddChild(control);
        }
    }

    public void UpdatePoints(int points)
    {
        Points = points;
    }

    #region Drag handle
    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = true;
    }

    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (_draggin)
        {
            foreach (var child in DragContainer.Children)
            {
                _position += args.Relative;
                LayoutContainer.SetPosition(child, child.Position + args.Relative);
            }
        }
    }

    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = false;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return _draggin ? DragMode.None : base.GetDragModeFor(relativeMousePos);
    }
    #endregion

    public void Select(TechnologyPrototype proto)
    {
        InfoContainer.DisposeAllChildren();
        if (!_player.LocalEntity.HasValue)
            return;

        var control = new TechnologyInfoPanel(proto, _sprite, Points, _accessReader.IsAllowed(_player.LocalEntity.Value, Entity) && List.Contains(proto.ID));
        InfoContainer.AddChild(control);
    }

    public void Select(BaseButton.ButtonEventArgs args)
    {
        if (args.Button is not DisciplineButton discipline)
            return;
        var proto = discipline.Proto;
        var state = discipline.Costyl;

        CurrentDiscipline = proto.ID;
        discipline.SetClickPressed(false);
        UserInterfaceManager.ClickSound();
        UpdatePanels(state);
        Recenter();
    }

    public void Recenter()
    {
        _position = new(45, 250);
        foreach (var item in DragContainer.Children)
        {
            if (item is not ResearchConsoleItem research)
                continue;
            LayoutContainer.SetPosition(item, _position + (research.Prototype.Position * 150));
        }
    }

    public override void Close()
    {
        base.Close();
    }

    protected override void Dispose(bool disposing)
    {
        InfoContainer.DisposeAllChildren();
        foreach (var item in DisciplinesContainer.Children)
        {
            if (item is not DisciplineButton button)
                continue;
            button.OnPressed -= Select;
        }
        base.Dispose(disposing);
    }

    private sealed partial class DisciplineButton(TechDisciplinePrototype proto, ResearchConsoleBoundInterfaceState state) : Button
    {
        public TechDisciplinePrototype Proto = proto;
        public ResearchConsoleBoundInterfaceState Costyl = state;
    }
}

