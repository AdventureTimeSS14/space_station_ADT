using Content.Client.UserInterface.Fragments;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;
using Robust.Shared.Input;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using System.Numerics;

namespace Content.Client.ADT.Research.UI;

public sealed partial class DraggablePanel : LayoutContainer
{
    private bool _isDragging;
    private Vector2 _dragStartPosition;
    private Vector2 _originalPosition;

    // Список дочерних элементов панели
    private List<Control> _children;

    public DraggablePanel()
    {
        _isDragging = false;
        _children = new List<Control>();

        this.OnKeyBindDown += args => OnKeybindDown(args);
        this.OnKeyBindUp += args => OnKeybindUp(args);
    }

    public void AddChildElement(Control child)
    {
        // Добавляем дочерний элемент в панель
        _children.Add(child);
        this.AddChild(child); // Также добавляем его в UI панель
    }

    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
        {
            // Начинаем перетаскивание
            _isDragging = true;
            _dragStartPosition = args.PointerLocation.Position;
            _originalPosition = this.Position; // Сохраняем исходную позицию панели
        }
    }

    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (_isDragging)
        {
            // Перемещаем все дочерние элементы, вычисляя разницу между начальной и текущей позицией мыши
            var delta = args.RelativePosition - _dragStartPosition;

            foreach (var child in _children)
            {
                SetPosition(child, child.Position + delta); // Перемещаем каждого дочернего элемента
            }
        }
    }

    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
        {
            // Завершаем перетаскивание
            _isDragging = false;
        }
    }
}
