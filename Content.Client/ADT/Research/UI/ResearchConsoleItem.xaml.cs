using Content.Shared.ADT.Research;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.ADT.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class ResearchConsoleItem : LayoutContainer
{
    // Публичные переменные
    public TechnologyPrototype Prototype;
    public Action<TechnologyPrototype, ResearchAvailablity>? SelectAction;
    public ResearchAvailablity Availablity;

    public ResearchConsoleItem(TechnologyPrototype proto, SpriteSystem sprite, ResearchAvailablity availablity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Availablity = availablity;
        Prototype = proto;

        ResearchDisplay.Texture = sprite.Frame0(proto.Icon);
        Panel.Button.OnPressed += Selected;
        switch (availablity)
        {
            case ResearchAvailablity.Researched:
                {
                    Panel.Color = Color.PaleGreen;
                    Panel.HoveredColor = Color.PaleGreen;
                    Panel.BorderColor = Color.LimeGreen;
                    break;
                }
            case ResearchAvailablity.Available:
                {
                    Panel.Color = Color.DarkOliveGreen;
                    Panel.HoveredColor = Color.PaleGreen;
                    Panel.BorderColor = Color.LimeGreen;
                    break;
                }
            case ResearchAvailablity.Unavailable:
                {
                    Panel.Color = Color.DarkRed;
                    Panel.HoveredColor = Color.PaleVioletRed;
                    Panel.BorderColor = Color.Crimson;
                    break;
                }

        }
    }

    protected override void Dispose(bool disposing)
    {
        Panel.Button.OnPressed -= Selected;
        base.Dispose(disposing);
    }

    private void Selected(BaseButton.ButtonEventArgs args)
    {
        SelectAction?.Invoke(Prototype, Availablity);
    }
}
