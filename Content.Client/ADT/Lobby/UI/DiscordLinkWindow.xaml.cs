using Content.Client.ADT.Discord;
using Content.Shared.ADT.CCVar;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
[UsedImplicitly]
public sealed partial class DiscordLinkWindow : DefaultWindow
{
    [Dependency] private readonly IClipboardManager _clipboard = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly DiscordIdManager _discordIdManager = default!;
    [Dependency] private readonly IUriOpener _uriOpener = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    private readonly string _defaultChannelLink = "https://discord.com/channels/901772674865455115/1351213738774237184";
    private string? _discordId;
    private string? _discordUsername;
    private string _channelLink = "";
    private bool _isLinked = false;

    private const string UnknownString = "UNKNOWN";

    public DiscordLinkWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var channelString = _cfg.GetCVar(ADTCCVars.DiscordLinkChannel);
        _channelLink = string.IsNullOrWhiteSpace(channelString) ? _defaultChannelLink : channelString;

        if (_discordIdManager.TryGetDiscordId(out var discordId))
        {
            _discordId = discordId;
            _isLinked = true;
        }

        if (_discordIdManager.TryGetDiscordUsername(out var discordUsername))
        {
            _discordUsername = discordUsername;
        }

        UpdateStatus();

        CopyUidButton.OnPressed += _ =>
        {
            var uid = _player.LocalSession?.UserId.ToString() ?? UnknownString;
            _clipboard.SetText(uid);
        };

        OpenDiscordButton.OnPressed += _ =>
        {
            _uriOpener.OpenUri(_channelLink);
        };

        CopyInstructionButton.OnPressed += _ =>
        {
            if (InstructionText.Text != null)
                _clipboard.SetText(InstructionText.Text);
            else
                _clipboard.SetText("");
        };
    }

    private void UpdateStatus()
    {
        if (_isLinked)
        {
            var uid = _player.LocalSession?.UserId.ToString() ?? UnknownString;
            var icName = _player.LocalSession?.Name ?? UnknownString;

            var message = new FormattedMessage();
            message.AddMarkupOrThrow(
                $"[color=green]✓ Вы успешно привязали Discord![/color]\n" +
                $"Имя: [color=lightblue]{_discordUsername}[/color] ([color=gray]{_discordId}[/color])\n" +
                $"UID: [color=yellow]{uid}[/color]\n" +
                $"Никнейм: [color=orange]{icName}[/color]");

            SuccessRichText.SetMessage(message);

            InstructionContainer.Visible = false;
            SuccessContainer.Visible = true;
        }
        else
        {
            var instructionMessage = new FormattedMessage();
            instructionMessage.AddMarkupOrThrow(
                "[color=white]Чтобы привязать Discord:[/color]\n" +
                "1. Скопируйте ваш UID.\n" +
                $"2. Перейдите в канал Discord: [color=yellow]{_channelLink}[/color].\n" +
                "3. В Discord нажмите кнопку `Привязать аккаунт` и введите ваш UID.");

            InstructionText.SetMessage(instructionMessage);

            InstructionContainer.Visible = true;
            SuccessContainer.Visible = false;
        }
    }
}
