using System.Linq;
using Content.Client.Guidebook;
using Content.Client.Lobby;
using Content.Client.UserInterface.Controls;
using Content.Shared.Preferences;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;
using Robust.Shared.Prototypes;

namespace Content.Client.ADT.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class QuirksWindow : FancyWindow
{
    private readonly IPrototypeManager _proto;

    public Action<TraitPrototype>? QuirkSelected;

    public QuirksWindow(IPrototypeManager proto)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title = Loc.GetString("quirks-window-title");
        _proto = proto;
    }

    public void Populate(HumanoidCharacterProfile profile)
    {
        QuirksContainer.RemoveAllChildren();
        PointsLabel.Text = Loc.GetString("quirks-window-points-label", ("points", profile.GetQuirkPoints()));

        var selected = profile.TraitPreferences.Where(x => _proto.Index(x).Quirk).ToList();
        if (selected.Count > 0)
        {
            var selectedStr = string.Join(", ", selected.Select(x => Loc.GetString(_proto.Index(x).Name)));
            SelectedQuirksLabel.SetMessage(Loc.GetString("quirks-window-selected-label", ("quirks", selectedStr)), null, Color.White);
        }
        else
            SelectedQuirksLabel.SetMessage(Loc.GetString("quirks-window-selected-none"), null, Color.White);

        var protoList = _proto.EnumeratePrototypes<TraitPrototype>().Where(x => x.Quirk && !x.SpeciesBlacklist.Contains(profile.Species)).ToList();
        protoList.Sort((x, y) => Loc.GetString(x.Name)[0].CompareTo(Loc.GetString(y.Name)[0]));
        protoList.Sort((x, y) => x.Cost.CompareTo(y.Cost));

        foreach (var proto in protoList)
        {
            AddPanel(profile, proto);
        }
    }

    private void AddPanel(HumanoidCharacterProfile profile, TraitPrototype proto)
    {
        var panel = new QuirkPanel(profile, proto);
        panel.Panel.Button.Disabled = !profile.CanToggleQuirk(proto);
        panel.Panel.Button.OnPressed += _ => QuirkSelected?.Invoke(proto);
        QuirksContainer.AddChild(panel);
    }
}
