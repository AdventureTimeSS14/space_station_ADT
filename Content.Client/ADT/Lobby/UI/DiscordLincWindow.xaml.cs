using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
// using Content.Shared.ADT.Discord;
using Robust.Shared.Network;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class DiscordLincWindow : DefaultWindow
    {
        [Dependency] private readonly IClipboardManager _clipboard = default!;
        [Dependency] private readonly IPlayerManager _player = default!;
        [Dependency] private readonly IClientNetManager _net = default!;
        public static bool HasLinkedDiscord { get; private set; }

        private string _uid = string.Empty;

        public DiscordLincWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _uid = _player.LocalSession?.UserId.ToString() ?? "UNKNOWN";

            // // Регистрация на получение ответа от сервера
            // _net.RegisterNetMessage<MsgReceiveDiscordId>(OnDiscordIdReceived);

            // // Отправка запроса на сервер
            // var msg = new MsgRequestDiscordId
            // {
            //     UserId = _player.LocalSession?.UserId ?? default!
            // };

            // _net.SendNetworkMessage(msg);

            UpdateStatus();

            CopyButton.OnPressed += _ =>
            {
                var text = GetInstructionText();
                _clipboard.SetText(text);
            };

            LinkButton.OnPressed += _ =>
            {
                HasLinkedDiscord = true;
                UpdateStatus();
            };
        }

        // // Обработка получения ответа от сервера с Discord ID
        // private void OnDiscordIdReceived(MsgReceiveDiscordId msg)
        // {
        //     if (msg.DiscordId != null)
        //     {
        //         _isLinked = true;
        //         _uid = msg.DiscordId;
        //     }
        //     else
        //     {
        //         _isLinked = false;
        //     }

        //     UpdateStatus();
        // }

        private void UpdateStatus()
        {
            if (HasLinkedDiscord)
            {
                StatusLabel.Text = "Ваш аккаунт уже привязан к Discord.";
                LinkButton.Visible = false;
            }
            else
            {
                StatusLabel.Text = "Ваш аккаунт НЕ привязан к Discord.";
                LinkButton.Visible = true;
            }

            var message = new FormattedMessage();
            message.AddMarkup(GetInstructionText());
            InstructionLabel.SetMessage(message);
        }

        private string GetInstructionText()
        {
            return $"Введите ваш UID: [color=green]{_uid}[/color] в канале Discord:\n" +
                   "[color=blue]https://discord.com/channels/901772674865455115/1351213738774237184[/color]";
        }

        // Заглушка, замени на реальную проверку
        private bool CheckDiscordLinkStatus()
        {
            return false; // или true
        }
    }
}
