using Content.Client.Corvax.Sponsors;
using Content.Shared.CCVar;
using Content.Shared.Corvax.Sponsors;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
[UsedImplicitly]
public sealed partial class SponsorInfoWindow : DefaultWindow
{
    [Dependency] private readonly SponsorsManager _sponsorsManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IUriOpener _uriOpener = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    public bool HasSponsor { get; private set; }
    public SponsorInfo? SponsorInfo { get; private set; } = default!;
    private string _userName = string.Empty;

    public SponsorInfoWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _userName = _player.LocalSession?.Name ?? Loc.GetString("ui-lobby-sponsor-menu-unknown");
        HasSponsor = _sponsorsManager.TryGetInfo(out var sponsor) && sponsor != null;
        if (HasSponsor)
            SponsorInfo = sponsor;

        // Красим кнопку "Стать спонсором"
        ButtonSiteBoosty.ModulateSelfOverride = Color.FromHex("#a68202");
        ButtonSiteBoosty.OnPressed += _ =>
        {
            var url = _cfg.GetCVar(CCVars.InfoLinksWebsite);
            _uriOpener.OpenUri(url);
        };

        UpdateSponsorInfo();
    }

    private void UpdateSponsorInfo()
    {
        List<string> lines;

        if (_sponsorsManager.TryGetInfo(out var sponsor) && sponsor != null)
        {
            SponsorInfo = sponsor;
            lines = new List<string>
            {
                Loc.GetString("ui-sponsor-info-tier", ("tier", sponsor.Tier ?? 0)),
                Loc.GetString("ui-sponsor-info-ooc-color", ("oocColor", sponsor.OOCColor ?? "не задано")),
                Loc.GetString("ui-sponsor-info-priority", ("priority", sponsor.HavePriorityJoin ? "Да" : "Нет")),
                Loc.GetString("ui-sponsor-info-allow-job", ("allowJob", sponsor.AllowJob ? "Да" : "Нет")),
                Loc.GetString("ui-sponsor-info-separator"),
                Loc.GetString("ui-sponsor-info-expire-date", ("date", sponsor.ExpireDate.ToString("dd.MM.yyyy")))
            };
        }
        else
        {
            SponsorInfo = null;
            lines = new List<string>
            {
                Loc.GetString("ui-sponsor-info-tier-none"),
                Loc.GetString("ui-sponsor-info-ooc-color-none"),
                Loc.GetString("ui-sponsor-info-priority-none"),
                Loc.GetString("ui-sponsor-info-allow-job-none")
            };
        }

        var formatted = new FormattedMessage();
        formatted.AddMarkup(string.Join("\n", lines));
        SponsorLabel.SetMessage(formatted);
    }
}
