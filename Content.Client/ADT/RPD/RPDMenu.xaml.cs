using Content.Client.UserInterface.Controls;
using Content.Shared.Popups;
using Content.Shared.ADT.RPD;
using Content.Shared.ADT.RPD.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;

namespace Content.Client.ADT.RPD;

[GenerateTypedNameReferences]
public sealed partial class RPDMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly SharedPopupSystem _popup;

    public event Action<ProtoId<RPDPrototype>>? SendRPDSystemMessageAction;

    private EntityUid _owner;

    public RPDMenu(EntityUid owner, RPDMenuBoundUserInterface bui)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _spriteSystem = _entManager.System<SpriteSystem>();
        _popup = _entManager.System<SharedPopupSystem>();

        _owner = owner;

        var main = FindControl<RadialContainer>("Main");

        if (main == null)
            return;

        if (!_entManager.TryGetComponent<RPDComponent>(owner, out var rpd))
            return;

        foreach (var protoId in rpd.AvailablePrototypes)
        {
            if (!_protoManager.TryIndex(protoId, out var proto))
                continue;

            if (proto.Mode == RpdMode.Invalid)
                continue;

            var parent = FindControl<RadialContainer>(proto.Category);

            if (parent == null)
                continue;

            var tooltip = Loc.GetString(proto.SetName);

            tooltip = OopsConcat(char.ToUpper(tooltip[0]).ToString(), tooltip.Remove(0, 1));

            var button = new RPDMenuButton()
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = tooltip,
                ProtoId = protoId,
            };

            if (proto.Sprite != null)
            {
                var tex = new TextureRect()
                {
                    VerticalAlignment = VAlignment.Center,
                    HorizontalAlignment = HAlignment.Center,
                    Texture = _spriteSystem.Frame0(proto.Sprite),
                    TextureScale = new Vector2(2f, 2f),
                };

                button.AddChild(tex);
            }

            parent.AddChild(button);

            foreach (var child in main.Children)
            {
                var castChild = child as RadialMenuTextureButton;

                if (castChild is not RadialMenuTextureButton)
                    continue;

                if (castChild.TargetLayer == proto.Category)
                {
                    castChild.Visible = true;
                    break;
                }
            }
        }

        foreach (var child in Children)
            AddRPDMenuButtonOnClickActions(child);

        OnChildAdded += AddRPDMenuButtonOnClickActions;

        SendRPDSystemMessageAction += bui.SendRPDSystemMessage;
    }

    private static string OopsConcat(string a, string b)
    {
        return a + b;
    }

    private void AddRPDMenuButtonOnClickActions(Control control)
    {
        var radialContainer = control as RadialContainer;

        if (radialContainer == null)
            return;

        foreach (var child in radialContainer.Children)
        {
            var castChild = child as RPDMenuButton;

            if (castChild == null)
                continue;

            castChild.OnButtonUp += _ =>
            {
                SendRPDSystemMessageAction?.Invoke(castChild.ProtoId);

                if (_playerManager.LocalSession?.AttachedEntity != null &&
                    _protoManager.TryIndex(castChild.ProtoId, out var proto))
                {
                    var msg = Loc.GetString("rpd-component-change-mode", ("mode", Loc.GetString(proto.SetName)));

                    if (proto.Mode == RpdMode.ConstructObject)
                    {
                        var name = Loc.GetString(proto.SetName);

                        if (proto.Prototype != null &&
                            _protoManager.TryIndex(proto.Prototype, out var entProto))
                            name = entProto.Name;

                        msg = Loc.GetString("rpd-component-change-build-mode", ("name", name));
                    }

                    _popup.PopupClient(msg, _owner, _playerManager.LocalSession.AttachedEntity);
                }

                Close();
            };
        }
    }
}

public sealed class RPDMenuButton : RadialMenuTextureButton
{
    public ProtoId<RPDPrototype> ProtoId { get; set; }

    public RPDMenuButton()
    {

    }
}
