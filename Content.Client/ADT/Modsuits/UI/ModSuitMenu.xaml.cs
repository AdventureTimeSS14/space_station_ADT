using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Shared.Mech;
using Content.Shared.Mech.Components;
using Robust.Client.AutoGenerated;
using Content.Shared.ADT.ModSuits;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Ninja.Components;
using System.Linq;
using System.Numerics;
using System.Threading;
using Content.Shared.Access.Systems;
using Content.Shared.CCVar;
using Content.Shared.Database;
using Content.Shared.DeviceNetwork;
using Content.Shared.GameTicking;
using Content.Shared.Localizations;
using Content.Shared.Shuttles.Components;
using Content.Shared.Shuttles.Events;
using Content.Shared.Tag;
using Content.Shared.Tiles;
using Robust.Shared.Audio.Systems;
using Robust.Shared.Configuration;
using Robust.Shared.EntitySerialization.Systems;
using Robust.Shared.Map.Components;
using Robust.Shared.Player;
using Robust.Shared.Random;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using Content.Client.PowerCell;

namespace Content.Client.ADT.Modsuits.UI;

[GenerateTypedNameReferences]
public sealed partial class ModSuitMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;
    private readonly ModSuitSystem _modsuit = default!;

    private EntityUid _mod;

    public event Action<EntityUid>? OnRemoveButtonPressed;
    public event Action<EntityUid>? OnActivateButtonPressed;
    public ModSuitMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _modsuit = _ent.System<ModSuitSystem>();
    }

    public void SetEntity(EntityUid uid)
    {
        MechView.SetEntity(uid);
        _mod = uid;
    }

    public void UpdateModStats()
    {
        if (!_ent.TryGetComponent<ModSuitComponent>(_mod, out var modComp))
            return;
        ModComplex.Text = Loc.GetString("mod-module-space") + modComp.CurrentComplexity + Environment.NewLine +
        Loc.GetString("mod-total-space") + modComp.MaxComplexity;

        switch (_modsuit.GetAttachedToggleStatus(_mod, modComp))
        {
            case ModSuitAttachedStatus.NoneToggled:
                ModState.Text = Loc.GetString("mod-none-toggled");
                break;
            case ModSuitAttachedStatus.PartlyToggled:
                ModState.Text = Loc.GetString("mod-partly-toggled");
                break;
            case ModSuitAttachedStatus.AllToggled:
                ModState.Text = Loc.GetString("mod-all-toggled");
                break;
        }
    }

    public void UpdateModuleView(ModBoundUiState state)
    {
        if (!_ent.TryGetComponent<ModSuitComponent>(_mod, out var mechComp))
            return;

        EquipmentControlContainer.RemoveAllChildren();
        var list = state.EquipmentStates.Keys;
        foreach (var item in list)
        {
            var ent = _ent.GetEntity(item);
            if (!_ent.TryGetComponent<ModSuitModComponent>(ent, out var modulecomp))
                continue;
            if (!_ent.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _ent.GetComponentOrNull<UIFragmentComponent>(ent);
            var ui = uicomp?.Ui?.GetUIFragmentRoot();

            var control = new ModuleControl(ent, metaData.EntityName, ui);

            if (modulecomp.Active)
            {
                control.ActivateButton.ModulateSelfOverride = new Color(1f, 0.3f, 0.3f, 0.5f);
                control.DeactivateButton.ModulateSelfOverride = new Color(0.3f, 0.6f, 1f, 0.7f);
            }
            else
            {
                control.ActivateButton.ModulateSelfOverride = new Color(0.3f, 0.6f, 1f, 0.7f);
                control.DeactivateButton.ModulateSelfOverride = new Color(1f, 0.3f, 0.3f, 0.5f);
            }
            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(ent);
            control.OnActivateButtonPressed += () => OnActivateButtonPressed?.Invoke(ent);

            EquipmentControlContainer.AddChild(control);
        }
    }
}

