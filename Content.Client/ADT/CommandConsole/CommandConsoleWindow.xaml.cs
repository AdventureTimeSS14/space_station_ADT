using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.CommandConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Text;
using System.Linq;
using Content.Client.Administration.Systems;
using Content.Client.UserInterface.Controls;
using Content.Shared.Administration;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using static Content.Client.Administration.UI.Tabs.PlayerTab.PlayerTabHeader;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.ADT.CommandConsole
{
    [GenerateTypedNameReferences]
    public sealed partial class CommandConsoleWindow : FancyWindow
    {
        private readonly CommandManager _commandManager = new();
        private EntityUid? _owner;
        private readonly IEntityManager _entMan;

        public CommandConsoleWindow(CommandConsoleBoundUserInterface userInterface, EntityUid? owner)
        {
            RobustXamlLoader.Load(this);

            _entMan = IoCManager.Resolve<IEntityManager>();
            _owner = owner;

            ExecuteButton.OnPressed += _ =>
            {
                var input = Rope.Collapse(CommandInput.TextRope);
                SaveProgress();

                var output = ProcessCommands(input);

                var currentOutput = OutputLabel.Text;
                OutputLabel.Text = currentOutput + output + "\n";

                CommandInput.TextRope = new Rope.Leaf("");
            };

            // Задаём чёрный фон вручную
            InputPanel.PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = Color.Black
            };

            OutputPanel.PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = Color.Black
            };
        }

        private string ProcessCommands(string input)
        {
            var lines = input.Split('\n');
            string result = "";

            foreach (var line in lines)
            {
                var trimmed = line.Trim();
                if (!string.IsNullOrEmpty(trimmed))
                {
                    var output = _commandManager.Execute(trimmed);
                    result += $"> {trimmed}\n";
                    result += output + "\n";
                }
            }

            return result;
        }

        protected override void Opened()
        {
            base.Opened();
            LoadProgress();
        }

        public override void Close()
        {
            SaveProgress();
            base.Close();
        }

        private void SaveProgress()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
            {
                comp.Input = Rope.Collapse(CommandInput.TextRope);
            }
        }

        private void LoadProgress()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp) && !string.IsNullOrEmpty(comp.Input))
            {
                CommandInput.TextRope = new Rope.Leaf(comp.Input);
            }
        }
    }
}
