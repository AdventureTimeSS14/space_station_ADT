using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.CommandConsole;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Text;
using System.Linq;
using Content.Client.Administration.Systems;
using Content.Client.UserInterface.Controls;
using Content.Shared.Administration;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using static Content.Client.Administration.UI.Tabs.PlayerTab.PlayerTabHeader;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.ADT.CommandConsole
{
    [GenerateTypedNameReferences]
    public sealed partial class CommandConsoleWindow : FancyWindow
    {
        private readonly CommandManager _commandManager = new();
        private EntityUid? _owner;
        private readonly IEntityManager _entMan;

        public CommandConsoleWindow(CommandConsoleBoundUserInterface userInterface, EntityUid? owner)
        {
            RobustXamlLoader.Load(this);

            _entMan = IoCManager.Resolve<IEntityManager>();
            _owner = owner;

            ExecuteButton.OnPressed += _ =>
            {
                var input = Rope.Collapse(CommandInput.TextRope);
                SaveProgress();

                var output = ProcessCommands(input);

                var currentOutput = OutputLabel.Text;
                OutputLabel.Text = currentOutput + output + "\n";

                // После выполнения команд обновляем состояние _commandManager в компоненте
                UpdateComponentState();

                CommandInput.TextRope = new Rope.Leaf("");
            };

            InputPanel.PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = Color.Black
            };

            CommandInput.Placeholder = new Rope.Leaf("> Booting Mini Command Console...");

            OutputPanel.PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = Color.Black
            };
        }

        private string ProcessCommands(string input)
        {
            var lines = input.Split('\n');
            string result = "";

            foreach (var line in lines)
            {
                var trimmed = line.Trim();
                if (!string.IsNullOrEmpty(trimmed))
                {
                    var output = _commandManager.Execute(trimmed);
                    result += $"> {trimmed}\n";
                    result += output + "\n";

                    if (_commandManager.ExitRequested)
                    {
                        // Логика закрытия консоли, если надо
                        Close();
                        break;
                    }
                }
            }

            return result;
        }

        protected override void Opened()
        {
            base.Opened();
            LoadProgress();
        }

        public override void Close()
        {
            SaveProgress();
            base.Close();
        }

        private void SaveProgress()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
            {
                comp.Input = Rope.Collapse(CommandInput.TextRope);

                // Сохраняем путь из менеджера команд в компонент
                comp.CurrentPath = _commandManager.CurrentPath;

                if (comp.RootDirectory.Children.Count == 0)
                {
                    InitializeFileSystem(comp.RootDirectory);
                }
            }
        }

        private void UpdateComponentState()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
            {
                // Обновляем путь из менеджера команд
                comp.CurrentPath = _commandManager.CurrentPath;
            }
        }

        private void LoadProgress()
        {
            if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
            {
                if (!string.IsNullOrEmpty(comp.Input))
                {
                    CommandInput.TextRope = new Rope.Leaf(comp.Input);
                }

                if (comp.RootDirectory.Children.Count == 0)
                {
                    InitializeFileSystem(comp.RootDirectory);
                }

                // Устанавливаем состояние менеджера команд
                _commandManager.SetState(comp.RootDirectory, comp.CurrentPath ?? "/");
            }
        }

        private void InitializeFileSystem(Directory root)
        {
            var etc = new Directory { Name = "etc" };
            var home = new Directory { Name = "home" };
            var usr = new Directory { Name = "usr" };
            var var = new Directory { Name = "var" };
            var bin = new Directory { Name = "bin" };
            var readme = new File { Name = "readme.txt", Content = "Welcome to Mini Command Console OS." };

            root.Add(etc);
            root.Add(home);
            root.Add(usr);
            root.Add(var);
            root.Add(bin);
            root.Add(readme);
        }

        // private void UpdateComponentState()
        // {
        //     if (_owner != null && _entMan.TryGetComponent(_owner.Value, out CommandConsoleComponent? comp))
        //     {
        //         // Обновляем путь из менеджера команд
        //         comp.CurrentPath = _commandManager.Pwd(Array.Empty<string>());
        //     }
        // }
    }
}
