using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Speech;
using Content.Shared.Whitelist;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Content.Shared.Phantom;
using Robust.Shared.Utility;
using Content.Shared.Humanoid.Prototypes;
using Content.Client.Humanoid;
using Content.Shared.Preferences;
using Robust.Shared.Map;
using Content.Shared.Humanoid;
using System.Linq;

namespace Content.Client.ADT.Phantom.UI;

[GenerateTypedNameReferences]
public sealed partial class PhantomVesselsMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    private readonly HumanoidAppearanceSystem _appearanceSystem;
    private readonly SpriteSystem _spriteSystem;
    public List<NetEntity> Vessels = new();

    public event Action<NetEntity>? OnSelectVessel;

    public PhantomVesselsMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _spriteSystem = _entManager.System<SpriteSystem>();
        _appearanceSystem = _entManager.System<HumanoidAppearanceSystem>();
    }

    public void Populate(RequestPhantomVesselMenuEvent args)
    {
        var parent = FindControl<RadialContainer>("Main");

        foreach (var (vessel, humanoid, name) in args.Vessels)
        {
            if (Vessels.Contains(vessel))
                return;

            var dummy = _entManager.SpawnEntity(_proto.Index(humanoid.Species).DollPrototype, MapCoordinates.Nullspace);
            _appearanceSystem.LoadProfile(dummy, humanoid);
            var face = new SpriteView();
            face.SetEntity(dummy);

            var button = new PhantomVesselsMenuButton
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(name ?? String.Empty),
                Entity = vessel,
                Profile = humanoid,
                Name = name,
            };
            
            face.Scale *= 1f;
            button.AddChild(face);
            parent.AddChild(button);
            Vessels.Add(vessel);
        }
        foreach (var child in Children)
        {
            if (child is not RadialContainer container)
                continue;
            AddVesselClickAction(container);
        }
    }
    private void AddVesselClickAction(RadialContainer container)
    {
        foreach (var child in container.Children)
        {
            if (child is not PhantomVesselsMenuButton castChild)
                continue;

            castChild.OnButtonUp += _ =>
            {
                OnSelectVessel?.Invoke(castChild.Entity);
            };
        }
    }
}


public sealed class PhantomVesselsMenuButton : RadialMenuTextureButton
{
    public NetEntity Entity;
    public HumanoidCharacterProfile? Profile;
    public string? Name;
}
