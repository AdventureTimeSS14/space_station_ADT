using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Speech;
using Content.Shared.Whitelist;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Content.Shared.ADT.Phantom;
using Robust.Shared.Utility;
using Content.Shared.Actions;
using Robust.Shared.Map;
using Content.Client.Humanoid;
using Content.Shared.Preferences;

namespace Content.Client.ADT.Phantom.UI;

[GenerateTypedNameReferences]
public sealed partial class PhantomRadialMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly HumanoidAppearanceSystem _humanoid;

    public event Action<ProtoId<PhantomStylePrototype>>? OnSelectStyle;
    public event Action<NetEntity>? OnSelectVessel;
    public event Action<string>? OnSelectFreedom;

    public PhantomRadialMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _spriteSystem = _entMan.System<SpriteSystem>();
        _humanoid = _entMan.System<HumanoidAppearanceSystem>();
    }

    public void PopulateStyles()
    {
        Main.RemoveAllChildren();

        var styles = _proto.EnumeratePrototypes<PhantomStylePrototype>();
        foreach (var style in styles)
        {
            var tex = new TextureRect
            {
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                Texture = _spriteSystem.Frame0(style.Icon ?? SpriteSpecifier.Invalid),
                TextureScale = new Vector2(1.5f, 1.5f),
                SetSize = new Vector2(48f, 48f),
            };

            var button = new RadialMenuTextureButtonWithSector
            {
                Children = { tex },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(style.Name ?? String.Empty)
            };

            button.OnPressed += args => OnSelectStyle?.Invoke(style.ID);

            Main.AddChild(button);
        }
    }

    public void PopulateFreedom(List<EntProtoId> prototypes)
    {
        Main.RemoveAllChildren();

        foreach (var protoId in prototypes)
        {
            var proto = _proto.Index(protoId);

            var button = new RadialMenuTextureButtonWithSector
            {
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(proto.Name ?? string.Empty)
            };

            button.OnPressed += args => OnSelectFreedom?.Invoke(proto.ID);

            if (proto.TryGetComponent(out InstantActionComponent? action) && action.Icon != null)
            {
                var tex = new TextureRect
                {
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    Texture = _spriteSystem.Frame0(action.Icon ?? SpriteSpecifier.Invalid),
                    TextureScale = new Vector2(1.5f, 1.5f),
                    SetSize = new Vector2(48f, 48f),
                };
                button.AddChild(tex);
            }

            Main.AddChild(button);
        }
    }

    public void PopulateVessels(List<(NetEntity, HumanoidCharacterProfile, string)> vessels)
    {
        foreach (var (vessel, humanoid, name) in vessels)
        {
            var dummy = _entMan.SpawnEntity(_proto.Index(humanoid.Species).DollPrototype, MapCoordinates.Nullspace);
            _humanoid.LoadProfile(dummy, humanoid);
            var face = new SpriteView();
            face.SetEntity(dummy);

            var button = new RadialMenuTextureButtonWithSector
            {
                Children = { face },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(name ?? string.Empty)
            };

            button.OnPressed += args => OnSelectVessel?.Invoke(vessel);

            face.Scale *= 2f;
            Main.AddChild(button);
        }
    }
}

