using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Speech;
using Content.Shared.Whitelist;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Content.Shared.ADT.Phantom;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Phantom.UI;

[GenerateTypedNameReferences]
public sealed partial class PhantomStyleMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly EntityWhitelistSystem _whitelistSystem;

    public event Action<ProtoId<PhantomStylePrototype>>? OnSelectStyle;

    public PhantomStyleMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _spriteSystem = _entManager.System<SpriteSystem>();
        _whitelistSystem = _entManager.System<EntityWhitelistSystem>();

        var main = FindControl<RadialContainer>("Main");

        var styles = _prototypeManager.EnumeratePrototypes<PhantomStylePrototype>();
        foreach (var style in styles)
        {
            var parent = FindControl<RadialContainer>("Main");

            var button = new PhantomStyleMenuButton
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(style.Name ?? String.Empty),
                ProtoId = style.ID,
            };
            var tex = new TextureRect
            {
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                Texture = _spriteSystem.Frame0(style.Icon ?? SpriteSpecifier.Invalid),
                TextureScale = new Vector2(1.5f, 1.5f),
                SetSize = new Vector2(48f, 48f),
            };
            button.AddChild(tex);

            parent.AddChild(button);
        }


        // Set up menu actions
        foreach (var child in Children)
        {
            if (child is not RadialContainer container)
                continue;
            AddStyleClickAction(container);
        }
    }

    private void AddStyleClickAction(RadialContainer container)
    {
        foreach (var child in container.Children)
        {
            if (child is not PhantomStyleMenuButton castChild)
                continue;

            castChild.OnButtonUp += _ =>
            {
                OnSelectStyle?.Invoke(castChild.ProtoId);
            };
        }
    }
}


public sealed class PhantomStyleMenuButton : RadialMenuTextureButton
{
    public ProtoId<PhantomStylePrototype> ProtoId { get; set; }
}
