using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Robust.Shared.Timing;
using Content.Shared.ADT.Ghost;

namespace Content.Client.ADT.Ghost;

[GenerateTypedNameReferences]
public sealed partial class GhostInfo : FancyWindow
{
    [Dependency] private readonly IClipboardManager _clipboard = null!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly ClientGameTicker _gameTicker;
    public float AccumulatedTime;

    private string _stationName = Loc.GetString("comp-pda-ui-unknown");
    private string _alertLevel = Loc.GetString("comp-pda-ui-unknown");
    private string _instructions = Loc.GetString("comp-pda-ui-unknown");

    /// <summary>
    /// Создаёт окно информации для привидений, загружает XAML, внедряет зависимости и настраивает обработчики кнопок.
    /// </summary>
    /// <remarks>
    /// Обработчики кнопок копируют в буфер обмена: имя станции, уровень тревоги, инструкции уровня тревоги и текущее время станции.
    /// Время станции вычисляется как <c>CurTime</c> минус <c>RoundStartTimeSpan</c> и форматируется как «hh:mm:ss».
    /// </remarks>
    public GhostInfo()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();

        StationNameButton.OnPressed += _ =>
        {
            _clipboard.SetText(_stationName);
        };

        StationAlertLevelButton.OnPressed += _ =>
        {
            _clipboard.SetText(_alertLevel);
        };

        StationTimeButton.OnPressed += _ =>
        {
            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);
            _clipboard.SetText((stationTime.ToString("hh\\:mm\\:ss")));
        };

        StationAlertLevelInstructionsButton.OnPressed += _ =>
        {
            _clipboard.SetText(_instructions);
        };
    }

    /// <summary>
    /// Обновляет отображаемое значение времени сессии станции каждый кадр.
    /// </summary>
    /// <remarks>
    /// Вычисляет прошедшее со старта раунда время (CurTime − RoundStartTimeSpan),
    /// форматирует его как "hh:mm:ss" и подставляет в локализованную строку для
    /// метки StationTimeLabel.
    /// </remarks>
    /// <param name="args">Аргументы кадра (FrameEventArgs), передаются дальше в базовую реализацию.</param>
    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);
        StationTimeLabel.SetMarkup(Loc.GetString("comp-pda-ui-station-time",
            ("time", stationTime.ToString("hh\\:mm\\:ss"))));
    }
    /// <summary>
    /// Обновляет содержимое окна информацией из состояния игрока-призрака (GhostInfoUpdateState) и подставляет её в элементы интерфейса.
    /// </summary>
    /// <param name="state">Состояние с информацией о станции: имя, уровень тревоги и цвет тревоги.</param>
    /// <remarks>
    /// - Заполняет внутренние поля _stationName, _alertLevel и _instructions (использует локализованную строку "unknown" если имя станции отсутствует).
    /// - Обновляет метки StationNameLabel, StationTimeLabel, StationAlertLevelLabel и StationAlertLevelInstructions.
    /// - Время станции вычисляется как difference между текущим временем игры и RoundStartTimeSpan и форматируется как "hh:mm:ss".
    /// - Для уровня тревоги формируется ключ "alert-level-<level>" или "alert-level-unknown" при null, который используется для получения локализованных строк уровня и инструкций.
    /// </remarks>
    public void UpdateState(GhostInfoUpdateState state)
    {
        _stationName = state.StationName ?? Loc.GetString("comp-pda-ui-unknown");
        StationNameLabel.SetMarkup(Loc.GetString("comp-pda-ui-station",
            ("station", _stationName)));

        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

        StationTimeLabel.SetMarkup(Loc.GetString("comp-pda-ui-station-time",
            ("time", stationTime.ToString("hh\\:mm\\:ss"))));

        var alertLevel = state.StationAlertLevel;
        var alertColor = state.StationAlertColor;
        var alertLevelKey = alertLevel != null ? $"alert-level-{alertLevel}" : "alert-level-unknown";
        _alertLevel = Loc.GetString(alertLevelKey);

        StationAlertLevelLabel.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level",
            ("color", alertColor),
            ("level", _alertLevel)
        ));
        _instructions = Loc.GetString($"{alertLevelKey}-instructions");
        StationAlertLevelInstructions.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level-instructions",
            ("instructions", _instructions))
        );
    }
}
