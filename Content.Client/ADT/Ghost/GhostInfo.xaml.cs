using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Robust.Shared.Timing;
using Content.Shared.ADT.Ghost;

namespace Content.Client.ADT.Ghost;

[GenerateTypedNameReferences]
public sealed partial class GhostInfo : FancyWindow
{
    [Dependency] private readonly IClipboardManager _clipboard = null!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly ClientGameTicker _gameTicker;
    public float AccumulatedTime;

    private string _alertLevel = Loc.GetString("comp-pda-ui-unknown");
    private string _instructions = Loc.GetString("comp-pda-ui-unknown");

    public GhostInfo()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();


        StationAlertLevelButton.OnPressed += _ =>
        {
            _clipboard.SetText(_alertLevel);
        };

        StationTimeButton.OnPressed += _ =>
        {
            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);
            _clipboard.SetText((stationTime.ToString("hh\\:mm\\:ss")));
        };

        StationAlertLevelInstructionsButton.OnPressed += _ =>
        {
            _clipboard.SetText(_instructions);
        };

        _gameTicker.InfoBlobUpdated += OnServerInfoUpdated;
    }

    private void OnServerInfoUpdated()
    {
        if (_gameTicker.ServerInfoBlob != null)
        {
            ServerInfoLabel.SetMarkup(_gameTicker.ServerInfoBlob);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);
        StationTimeLabel.SetMarkup(Loc.GetString("comp-pda-ui-station-time",
            ("time", stationTime.ToString("hh\\:mm\\:ss"))));
    }
    public void UpdateState(GhostInfoUpdateState state)
    {
        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

        StationTimeLabel.SetMarkup(Loc.GetString("comp-pda-ui-station-time",
            ("time", stationTime.ToString("hh\\:mm\\:ss"))));

        var alertLevel = state.StationAlertLevel;
        var alertColor = state.StationAlertColor;
        var alertLevelKey = alertLevel != null ? $"alert-level-{alertLevel}" : "alert-level-unknown";
        _alertLevel = Loc.GetString(alertLevelKey);

        StationAlertLevelLabel.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level",
            ("color", alertColor),
            ("level", _alertLevel)
        ));
        _instructions = Loc.GetString($"{alertLevelKey}-instructions");
        StationAlertLevelInstructions.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level-instructions",
            ("instructions", _instructions))
        );

        if (_gameTicker.ServerInfoBlob != null)
        {
            ServerInfoLabel.SetMarkup(_gameTicker.ServerInfoBlob);
        }
    }
}
