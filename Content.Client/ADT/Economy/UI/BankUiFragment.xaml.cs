using System.Linq;
using System.Text.RegularExpressions;
using Content.Client.Message;
using Content.Shared.ADT.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.ADT.Economy.UI;

[GenerateTypedNameReferences]
public sealed partial class BankUiFragment : BoxContainer
{
    public Action<BankAccountLinkMessage>? OnLinkAttempt;
    public Action<BankTabSwitchMessage>? OnTabSwitch;
    private bool _accountLinkActive;
    private readonly string _lineEditPattern = "[^0-9]";

    public BankUiFragment()
    {
        RobustXamlLoader.Load(this);

        AccountLinkButton.OnPressed += _ =>
        {
            _accountLinkActive = true;
            AccountLinkResultLabel.Visible = false;
            UpdateAccountLinkUi();
        };

        LinkCancelButton.OnPressed += _ =>
        {
            _accountLinkActive = false;
            UpdateAccountLinkUi();
        };

        PinLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(PinLineEdit, 4);
        };

        AccountLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(AccountLineEdit, 6);
        };

        LinkConfirmButton.OnPressed += _ =>
        {
            if (PinLineEdit.Text.Length != 4 || AccountLineEdit.Text.Length != 6)
                return;

            var accountId = int.Parse(AccountLineEdit.Text);
            var pin = int.Parse(PinLineEdit.Text);
            AccountLinkResultLabel.Visible = true;
            _accountLinkActive = false;
            OnLinkAttempt?.Invoke(new BankAccountLinkMessage(accountId, pin));
        };

        AccountTabButton.OnPressed += _ => SwitchTab(BankTab.Account);
        HistoryTabButton.OnPressed += _ => SwitchTab(BankTab.History);
    }

    private void SwitchTab(BankTab tab)
    {
        AccountTab.Visible = tab == BankTab.Account;
        HistoryTab.Visible = tab == BankTab.History;

        AccountTabButton.StyleClasses.Remove("TabButtonActive");
        HistoryTabButton.StyleClasses.Remove("TabButtonActive");

        if (tab == BankTab.Account)
            AccountTabButton.StyleClasses.Add("TabButtonActive");
        else
            HistoryTabButton.StyleClasses.Add("TabButtonActive");

        OnTabSwitch?.Invoke(new BankTabSwitchMessage(tab));
    }

    public void UpdateState(BankCartridgeUiState state)
    {
        var accountLinked = state.AccountId != null;

        RichTextLabelExt.SetMarkup(AccountLinkMessageLabel, state.AccountLinkMessage);
        RichTextLabelExt.SetMarkup(AccountLinkResultLabel, state.AccountLinkResult);

        LinkedAccount.Visible = accountLinked;
        NoLinkedAccountLabel.Visible = !accountLinked;

        if (accountLinked)
        {
            RichTextLabelExt.SetMarkup(LinkedAccountNumberLabel, Loc.GetString("bank-program-ui-account-number-text",
                ("account", state.AccountId!.Value)));
            RichTextLabelExt.SetMarkup(LinkedAccountNameLabel, Loc.GetString("bank-program-ui-account-owner-text",
                ("owner", state.OwnerName)));
            RichTextLabelExt.SetMarkup(LinkedAccountBalanceLabel, Loc.GetString("atm-ui-balance", ("balance", state.Balance)));

            UpdateTransactionHistory(state.TransactionHistory);
            UpdateAccountLinkUi();
            return;
        }

        RichTextLabelExt.SetMarkup(NoLinkedAccountLabel, Loc.GetString("bank-program-ui-no-account"));
        UpdateAccountLinkUi();
    }

    private void UpdateTransactionHistory(List<BankTransaction> transactions)
    {
        TransactionList.RemoveAllChildren();

        if (transactions.Count == 0)
        {
            NoTransactionsLabel.Visible = true;
            return;
        }

        NoTransactionsLabel.Visible = false;

        var sortedTransactions = transactions.OrderByDescending(t => t.Timestamp).ToList();

        foreach (var transaction in sortedTransactions)
        {
            var transactionContainer = new PanelContainer
            {
                StyleClasses = { "TransactionEntry" },
                HorizontalExpand = true
            };

            var transactionBox = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Margin = new Thickness(8)
            };

            var headerBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true
            };

            var typeIcon = GetTransactionIcon(transaction.Type);
            var amountColor = transaction.Amount >= 0 ? "green" : "red";
            var amountSign = transaction.Amount >= 0 ? "+" : "";

            var headerLabel = new RichTextLabel();
            RichTextLabelExt.SetMarkup(headerLabel,
                $"{typeIcon} [bold]{transaction.Description}[/bold] " +
                $"[color={amountColor}]{amountSign}{transaction.Amount}₽[/color]");

            var timeLabel = new RichTextLabel
            {
                HorizontalAlignment = HAlignment.Right
            };

            RichTextLabelExt.SetMarkup(timeLabel,
                $"[color=gray]{transaction.Timestamp.ToString(@"dd\.hh\:mm\:ss")}[/color]");

            headerBox.AddChild(headerLabel);
            headerBox.AddChild(timeLabel);

            var detailsBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true
            };

            var balanceLabel = new RichTextLabel();
            RichTextLabelExt.SetMarkup(balanceLabel,
                $"[color=gray]Баланс после: {transaction.BalanceAfter}₽[/color]");

            detailsBox.AddChild(balanceLabel);

            if (!string.IsNullOrEmpty(transaction.Details))
            {
                var spacer = new Control { HorizontalExpand = true };
                var detailsLabel = new RichTextLabel
                {
                    HorizontalAlignment = HAlignment.Right
                };

                RichTextLabelExt.SetMarkup(detailsLabel,
                    $"[color=gray]{transaction.Details}[/color]");

                detailsBox.AddChild(spacer);
                detailsBox.AddChild(detailsLabel);
            }

            transactionBox.AddChild(headerBox);
            transactionBox.AddChild(detailsBox);
            transactionContainer.AddChild(transactionBox);
            TransactionList.AddChild(transactionContainer);
        }
    }

    private string GetTransactionIcon(BankTransactionType type)
    {
        return type switch
        {
            BankTransactionType.AtmDeposit => "💰",
            BankTransactionType.AtmWithdraw => "🏧",
            BankTransactionType.Purchase => "🛒",
            BankTransactionType.Transfer => "💸",
            BankTransactionType.Salary => "💼",
            BankTransactionType.EftposPayment => "💳",
            _ => "📊"
        };
    }

    private void UpdateAccountLinkUi()
    {
        AccountLinkButton.Visible = !_accountLinkActive;
        AccountLink.Visible = _accountLinkActive;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        LinkConfirmButton.Disabled = PinLineEdit.Text.Length != 4 || AccountLineEdit.Text.Length != 6;
    }

    private void ValidateLineEdit(LineEdit lineEdit, int length)
    {
        var text = Regex.Replace(lineEdit.Text, _lineEditPattern, string.Empty);

        if (text.Length > length)
        {
            text = text[..length];
        }

        lineEdit.Text = text;
    }
}
