using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.Tabs.AdminbusTab
{
    [GenerateTypedNameReferences]
    public sealed partial class CommandExecutorWindow : DefaultWindow
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

        public CommandExecutorWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            // Устанавливаем placeholder
            CommandText.Placeholder = new Rope.Leaf(Loc.GetString("admin-command-executor-placeholder"));

            // Обработчики событий
            ExecuteButton.OnPressed += OnExecutePressed;
            ClearButton.OnPressed += OnClearPressed;

            UpdateStatus(Loc.GetString("admin-command-executor-ready"));
        }

        private void OnExecutePressed(BaseButton.ButtonEventArgs args)
        {
            ExecuteCommands();
        }

        private void OnClearPressed(BaseButton.ButtonEventArgs args)
        {
            CommandText.TextRope = Rope.Leaf.Empty;
            UpdateStatus(Loc.GetString("admin-command-executor-cleared"));
        }

        private void ExecuteCommands()
        {
            var commandsText = Rope.Collapse(CommandText.TextRope).Trim();

            if (string.IsNullOrWhiteSpace(commandsText))
            {
                UpdateStatus(Loc.GetString("admin-command-executor-empty"));
                return;
            }

            // Разбиваем на строки и выполняем каждую команду
            var lines = commandsText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            var executedCount = 0;

            foreach (var line in lines)
            {
                var command = line.Trim();
                if (!string.IsNullOrWhiteSpace(command))
                {
                    _consoleHost.ExecuteCommand(command);
                    executedCount++;
                }
            }

            UpdateStatus(Loc.GetString("admin-command-executor-executed", ("count", executedCount)));
        }

        private void UpdateStatus(string message)
        {
            StatusLabel.Text = message;
        }
    }
}
