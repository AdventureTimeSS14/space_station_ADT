using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class EchoChatPanelWindow : DefaultWindow
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

        private int _selectedTypeId = 0;

        public EchoChatPanelWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            // Заполняем типы сообщений
            MessageTypeOption.AddItem(Loc.GetString("admin-echo-chat-type-speak"));
            MessageTypeOption.AddItem(Loc.GetString("admin-echo-chat-type-emote"));
            MessageTypeOption.AddItem(Loc.GetString("admin-echo-chat-type-whisper"));
            MessageTypeOption.SelectId(0);

            // Полупрозрачный текст в поле ввода
            MessageText.Placeholder = new Rope.Leaf(Loc.GetString("admin-echo-chat-placeholder"));

            // Обработчики
            PlayerNameLine.OnTextChanged += _ => UpdateSubmitButton();
            MessageText.OnKeyBindUp += _ => UpdateSubmitButton();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitButton.OnPressed += OnSubmitPressed;

            MessageTypeOption.OnItemSelected += args =>
            {
                _selectedTypeId = args.Id;
                Logger.Info($"Выбран тип сообщения (обновлён): {_selectedTypeId}");
                UpdateSubmitButton();
            };

            UpdateSubmitButton();
        }

        private void UpdateSubmitButton()
        {
            var message = Rope.Collapse(MessageText.TextRope).Trim();
            SubmitButton.Disabled =
                string.IsNullOrWhiteSpace(PlayerNameLine.Text) ||
                string.IsNullOrWhiteSpace(message);

            MessageTypeOption.SelectId(_selectedTypeId);
            MessageTypeOption.UpdateDraw();
        }

        private void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            UpdateSubmitButton();
        }

        private void OnSubmitPressed(BaseButton.ButtonEventArgs args)
        {
            var playerName = PlayerNameLine.Text;
            var message = Rope.Collapse(MessageText.TextRope).Trim();

            if (string.IsNullOrWhiteSpace(playerName) || string.IsNullOrWhiteSpace(message))
                return;

            var type = _selectedTypeId switch
            {
                0 => "speak",
                1 => "emote",
                2 => "whisper",
                _ => "speak"
            };

            var escapedMessage = CommandParsing.Escape(message);
            _consoleHost.ExecuteCommand($"echo_chat \"{playerName}\" \"{escapedMessage}\" {type}");
        }
    }
}

/*
    ╔════════════════════════════════════╗
    ║   Schrödinger's Cat Code   🐾      ║
    ║   /\_/\\                           ║
    ║  ( o.o )  Meow!                    ║
    ║   > ^ <                            ║
    ╚════════════════════════════════════╝

*/
