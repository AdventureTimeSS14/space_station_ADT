using Content.Shared.Administration;
using Content.Shared.Roles;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;


namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class PlayTimeEditorWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        private readonly IClientConsoleHost _consoleHost;
        private readonly List<(string Name, string Tracker)> _allRoles = new();

        public PlayTimeEditorWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _consoleHost = IoCManager.Resolve<IClientConsoleHost>();

            InitializeRoles();
            WireEvents();
            SetButtonsState(true);
        }

        private void InitializeRoles()
        {
            _allRoles.Clear();

            foreach (var job in _prototypeManager.EnumeratePrototypes<JobPrototype>())
            {
                _allRoles.Add((job.LocalizedName, job.PlayTimeTracker));
            }

            RefreshFilteredRoles("");
        }

        private void WireEvents()
        {
            PlayerNameLine.OnTextChanged += _ => RefreshButtons();
            MinutesInput.OnTextChanged += _ => RefreshButtons();
            MinutesInput.OnTextChanged += UpdateTimeButtonsLabels;
            PlayerList.OnSelectionChanged += OnPlayerSelected;
            RoleFilterInput.OnTextChanged += _ => RefreshFilteredRoles(RoleFilterInput.Text);

            // Полупрозрачный текст в поле ввода
            RoleFilterInput.PlaceHolder = Loc.GetString("admin-time-panel-window-role-filtre");

            AddHourButton.OnPressed += _ => AdjustMinutes(60);
            AddDayButton.OnPressed += _ => AdjustMinutes(1440);
            AddWeekButton.OnPressed += _ => AdjustMinutes(10080);
            AddMonthButton.OnPressed += _ => AdjustMinutes(43200);

            ApplyRoleButton.OnPressed += OnApplyRole;
            ApplyTotalButton.OnPressed += OnApplyTotal;
            RoleOption.OnItemSelected += args => RoleOption.SelectId(args.Id);
        }

        private void RefreshFilteredRoles(string filter)
        {
            RoleOption.Clear();
            var index = 0;

            foreach (var (name, tracker) in _allRoles)
            {
                if (!name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                    continue;

                RoleOption.AddItem(name);
                RoleOption.SetItemMetadata(index++, tracker);
            }

            if (RoleOption.ItemCount > 0)
                RoleOption.SelectId(0);
        }

        private void RefreshButtons()
        {
            var inputValid = !string.IsNullOrWhiteSpace(PlayerNameLine.Text) && !string.IsNullOrWhiteSpace(MinutesInput.Text);
            SetButtonsState(!inputValid);
        }

        private void SetButtonsState(bool disabled)
        {
            ApplyRoleButton.Disabled = disabled;
            ApplyTotalButton.Disabled = disabled;
        }

        private void OnPlayerSelected(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            RefreshButtons();
        }

        private void OnApplyRole(BaseButton.ButtonEventArgs _)
        {
            if (RoleOption.SelectedMetadata is not string role || string.IsNullOrWhiteSpace(role))
                return;

            _consoleHost.ExecuteCommand($"playtime_addrole_as \"{PlayerNameLine.Text}\" \"{CommandParsing.Escape(role)}\" {MinutesInput.Text}");
        }

        private void OnApplyTotal(BaseButton.ButtonEventArgs _)
        {
            _consoleHost.ExecuteCommand($"playtime_addoverall_as \"{PlayerNameLine.Text}\" {MinutesInput.Text}");
        }

        private void UpdateTimeButtonsLabels(LineEditEventArgs _)
        {
            if (!uint.TryParse(MinutesInput.Text, out var minutes))
                return;

            AddHourButton.Text = $"+1h ({minutes / 60})";
            AddDayButton.Text = $"+1d ({minutes / 1440})";
            AddWeekButton.Text = $"+1w ({minutes / 10080})";
            AddMonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void AdjustMinutes(uint delta)
        {
            if (!uint.TryParse(MinutesInput.Text, out var current))
                current = 0;

            var total = current + delta;
            MinutesInput.Text = total.ToString();

            UpdateTimeButtonsLabels(null!);
            RefreshButtons();
        }
    }
}

/*
    ╔════════════════════════════════════╗
    ║   Schrödinger's Cat Code   🐾      ║
    ║   /\_/\\                           ║
    ║  ( o.o )  Meow!                    ║
    ║   > ^ <                            ║
    ╚════════════════════════════════════╝
*/
