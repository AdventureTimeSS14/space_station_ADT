using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Robust.Shared.Timing;
using Content.Shared.ADT.Silicons.Borgs;
using Content.Shared.Silicons.Borgs.Components;

namespace Content.Client.ADT.Silicons.Borgs;
[GenerateTypedNameReferences]
public sealed partial class BorgInfoWindow : FancyWindow
{
    [Dependency] private readonly IClipboardManager _clipboard = null!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IEntityManager _entity = default!;
    private readonly ClientGameTicker _gameTicker;
    public float AccumulatedTime;
    private List<EntityUid> _modules = new();

    private string _stationName = Loc.GetString("comp-pda-ui-unknown");
    private string _alertLevel = Loc.GetString("comp-pda-ui-unknown");
    private string _instructions = Loc.GetString("comp-pda-ui-unknown");

    public BorgInfoWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();


        StationNameButton.OnPressed += _ =>
        {
            _clipboard.SetText(_stationName);
        };

        StationAlertLevelButton.OnPressed += _ =>
        {
            _clipboard.SetText(_alertLevel);
        };

        StationTimeButton.OnPressed += _ =>
        {
            var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);
            _clipboard.SetText((stationTime.ToString("hh\\:mm\\:ss")));
        };

        StationAlertLevelInstructionsButton.OnPressed += _ =>
        {
            _clipboard.SetText(_instructions);
        };
    }
    public void SetEntity(EntityUid entity)
    {
        BorgSprite.SetEntity(entity);

        NameLabel.Text = _entity.GetComponent<MetaDataComponent>(entity).EntityName;
    }
    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        AccumulatedTime += args.DeltaSeconds;
        BorgSprite.OverrideDirection = (Direction)((int)AccumulatedTime % 4 * 2);
    }

    public void UpdateState(BorgInfoUpdateState state)
    {
        ChargeBar.Value = state.ChargePercent;
        ChargeLabel.Text = Loc.GetString("borg-ui-charge-label",
            ("charge", (int)MathF.Round(state.ChargePercent * 100)));

        NameLabel.Text = state.BorgName;

        _stationName = state.StationInfo.StationName ?? Loc.GetString("comp-pda-ui-unknown");
        StationNameLabel.SetMarkup(Loc.GetString("comp-pda-ui-station",
            ("station", _stationName)));

        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

        StationTimeLabel.SetMarkup(Loc.GetString("comp-pda-ui-station-time",
            ("time", stationTime.ToString("hh\\:mm\\:ss"))));

        var alertLevel = state.StationInfo.StationAlertLevel;
        var alertColor = state.StationInfo.StationAlertColor;
        var alertLevelKey = alertLevel != null ? $"alert-level-{alertLevel}" : "alert-level-unknown";
        _alertLevel = Loc.GetString(alertLevelKey);

        StationAlertLevelLabel.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level",
            ("color", alertColor),
            ("level", _alertLevel)
        ));
        _instructions = Loc.GetString($"{alertLevelKey}-instructions");
        StationAlertLevelInstructions.SetMarkup(Loc.GetString(
            "comp-pda-ui-station-alert-level-instructions",
            ("instructions", _instructions))
        );

    }
    public void UpdateModulePanel(EntityUid entity)
    {
        if (!_entity.TryGetComponent(entity, out BorgChassisComponent? chassis))
            return;

        ModuleCounter.Text = Loc.GetString("borg-ui-module-counter",
            ("actual", chassis.ModuleCount),
            ("max", chassis.MaxModules));

        if (chassis.ModuleContainer.Count == _modules.Count)
        {
            var isSame = true;
            foreach (var module in chassis.ModuleContainer.ContainedEntities)
            {
                if (_modules.Contains(module))
                    continue;
                isSame = false;
                break;
            }

            if (isSame)
                return;
        }
        ModuleContainer.Children.Clear();
        _modules.Clear();
        foreach (var module in chassis.ModuleContainer.ContainedEntities)
        {
            var control = new BorgInfoModule(module, _entity);
            ModuleContainer.AddChild(control);
            _modules.Add(module);
        }
    }
}
