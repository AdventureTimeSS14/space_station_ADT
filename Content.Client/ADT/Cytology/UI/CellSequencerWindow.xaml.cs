using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.Cytology;
using Content.Shared.ADT.Cytology.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Cytology.UI;

[GenerateTypedNameReferences]
public sealed partial class CellSequencerWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly CellSystem _cell;

    public event Action? OnSync;
    public event Action<Cell?>? OnAdd;
    public event Action<Cell?, bool>? OnRemove;
    public event Action<Cell?>? OnPrint;

    private CellEntryControl? _sequencerEntry;
    private int _material;
    private bool _hasContainer;

    private bool SelectionIsRemote => _sequencerEntry is { Remote: true };

    private Cell? SelectedCell => _sequencerEntry?.Cell;

    private bool HasCell => SelectedCell is not null;
    private bool HasMaterial => SelectedCell is { } cell && cell.Cost <= _material;

    public CellSequencerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _cell = _entity.System<CellSystem>();

        SetMaterialCount(0);

        SyncButton.OnPressed += _ => OnSync?.Invoke();
        AddButton.OnPressed += _ => OnAdd?.Invoke(SelectedCell);
        RemoveButton.OnPressed += _ =>
        {
            OnRemove?.Invoke(SelectedCell, _sequencerEntry?.Remote ?? false);
            SelectedCellEntry(null);
        };
        ReplaceButton.OnPressed += _ => OnPrint?.Invoke(SelectedCell);
    }

    public void UpdateState(CellSequencerUiState state)
    {
        SetMaterialCount(state.Material);

        _hasContainer = state.HasContainer;

        InsideCellContainer.RemoveAllChildren();
        foreach (var savedCell in state.InsideCells)
        {
            var entry = new CellEntryControl(savedCell, false);
            entry.OnSelect += SelectedCellEntry;
            InsideCellContainer.AddChild(entry);
        }

        RemoteCellContainer.RemoveAllChildren();
        foreach (var savedCell in state.RemoteCells)
        {
            var entry = new CellEntryControl(savedCell, true);
            entry.OnSelect += SelectedCellEntry;
            RemoteCellContainer.AddChild(entry);
        }
    }

    private void SelectedCellEntry(CellEntryControl? entry)
    {
        SetSequencerEntry(entry);
        SetCellInfo(SelectedCell);
        UpdateButtonState();
    }

    private void UpdateButtonState()
    {
        AddButton.Disabled = !HasCell || SelectionIsRemote;
        RemoveButton.Disabled = !HasCell || !SelectionIsRemote;
        ReplaceButton.Disabled = !SelectionIsRemote || !HasMaterial || !_hasContainer;
    }

    private void SetSequencerEntry(CellEntryControl? entry)
    {
        _sequencerEntry?.SetState(true);

        _sequencerEntry = entry;
        _sequencerEntry?.SetState(false);
    }

    private void SetMaterialCount(int count)
    {
        _material = count;
        MaterialLabel.Text = Loc.GetString("cell-sequencer-menu-cell-material-label", ("material", _material));
    }

    private void SetCellInfo(Cell? cell)
    {
        CellInfoContainer.Visible = cell is not null;
        NoSelectedLabel.Visible = cell is null;

        if (cell is null)
            return;

        SetCellInfoName(cell.Name);
        SetCellInfoColor(cell.Color);
        SetCellInfoStability(cell.Stability);
        SetCellInfoCost(cell.Cost);
        SetCellInfoModifiers(cell.Modifiers);
    }

    private void SetCellInfoName(string name)
    {
        CellNameLabel.Text = Loc.GetString("cell-sequencer-menu-cell-name-label", ("name", name));
    }

    private void SetCellInfoColor(Color color)
    {
        var colorTitle = Loc.GetString("cell-sequencer-menu-cell-color-label", ("color", color.ToHex()));

        if (!FormattedMessage.TryFromMarkup(colorTitle, out var colorMarkup))
        {
            CellColorLabel.SetMessage(colorTitle);
            return;
        }

        CellColorLabel.SetMessage(colorMarkup);
    }

    private void SetCellInfoStability(float stability)
    {
        CellStabilityLabel.Text = Loc.GetString("cell-sequencer-menu-cell-stability-label", ("stability", Math.Round(stability * 100f, 3)));
    }

    private void SetCellInfoCost(int cost)
    {
        CellCostLabel.Text = Loc.GetString("cell-sequencer-menu-cell-cost-label", ("cost", cost));
    }

    private void SetCellInfoModifiers(List<ProtoId<CellModifierPrototype>> modifiers)
    {
        var message = _cell.GetCellModifiersString(modifiers);

        if (!FormattedMessage.TryFromMarkup(message, out var markup))
        {
            CellModifiersText.SetMessage(message);
            return;
        }

        CellModifiersText.SetMessage(markup);
    }
}
