using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.Cytology;
using Content.Shared.ADT.Cytology.Systems;
using Content.Shared.ADT.Cytology.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.ADT.Cytology.UI;

[GenerateTypedNameReferences]
public sealed partial class CellularFusionWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly CellSystem _cell;

    public event Action? OnSync;
    public event Action<Cell, Cell>? OnSplice;

    private CellEntryControl? _selectedEntryA;
    private CellEntryControl? _selectedEntryB;

    private int _material;

    public CellularFusionWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _cell = _entity.System<CellSystem>();

        SetMaterialCount(0);

        SyncButton.OnPressed += _ => OnSync?.Invoke();
        SpliceButton.OnPressed += _ =>
        {
            if (_selectedEntryA?.Cell is not { } cellA || _selectedEntryB?.Cell is not { } cellB)
                return;

            OnSplice?.Invoke(cellA, cellB);
        };
    }

    public void UpdateState(CellularFusionUiState state)
    {
        SetMaterialCount(state.Material);

        CellContainerA.RemoveAllChildren();
        foreach (var savedCell in state.RemoteCells)
        {
            var entry = new CellEntryControl(savedCell, false);
            entry.OnSelect += SelectedCellEntryA;

            CellContainerA.AddChild(entry);
        }

        CellContainerB.RemoveAllChildren();
        foreach (var savedCell in state.RemoteCells)
        {
            var entry = new CellEntryControl(savedCell, false);
            entry.OnSelect += SelectedCellEntryB;

            CellContainerB.AddChild(entry);
        }
    }

    private void SelectedCellEntryA(CellEntryControl entry)
    {
        SelectCellEntry(entry, ref _selectedEntryA);
        CellANoSelectedLabel.Visible = _selectedEntryA is null;
        UpdateCellInfo();
    }

    private void SelectedCellEntryB(CellEntryControl entry)
    {
        SelectCellEntry(entry, ref _selectedEntryB);
        CellBNoSelectedLabel.Visible = _selectedEntryB is null;
        UpdateCellInfo();
    }

    private void SelectCellEntry(CellEntryControl? entryNew, ref CellEntryControl? entryPrevious)
    {
        entryPrevious?.SetState(true);
        entryNew?.SetState(false);

        entryPrevious = entryNew;
    }

    private void UpdateCellInfo()
    {
        var selected = _selectedEntryA is not null && _selectedEntryB is not null;

        CellInfoContainer.Visible = selected;
        SpliceButton.Disabled = true;

        if (_selectedEntryA is not { } entryA || _selectedEntryB is not { } entryB)
            return;

        var cost = SharedCellSystem.GetMergedCost(entryA.Cell, entryB.Cell);
        var hasMaterial = cost <= _material;

        SpliceButton.Disabled = !hasMaterial;

        SetCellInfoName(SharedCellSystem.GetMergedName(entryA.Cell, entryB.Cell));
        SetCellInfoColor(SharedCellSystem.GetMergedColor(entryA.Cell, entryB.Cell));
        SetCellInfoStability(SharedCellSystem.GetMergedStability(entryA.Cell, entryB.Cell));
        SetCellInfoCost(cost);
        SetCellInfoModifiers(SharedCellSystem.GetMergedModifiers(entryA.Cell, entryB.Cell));
    }

    private void SetMaterialCount(int count)
    {
        _material = count;

        MaterialLabel.Text = Loc.GetString("cellular-fusion-menu-cell-material-label", ("material", _material));
    }

    private void SetCellInfoName(string name)
    {
        CellNameLabel.Text = Loc.GetString("cellular-fusion-menu-cell-name-label", ("name", name));
    }

    private void SetCellInfoColor(Color color)
    {
        var colorTitle = Loc.GetString("cellular-fusion-menu-cell-color-label", ("color", color.ToHex()));

        if (!FormattedMessage.TryFromMarkup(colorTitle, out var colorMarkup))
        {
            CellColorLabel.SetMessage(colorTitle);
            return;
        }

        CellColorLabel.SetMessage(colorMarkup);
    }

    private void SetCellInfoStability(float stability)
    {
        CellStabilityLabel.Text = Loc.GetString("cellular-fusion-menu-cell-stability-label", ("stability", Math.Round(stability * 100f, 3)));
    }

    private void SetCellInfoCost(int cost)
    {
        CellCostLabel.Text = Loc.GetString("cellular-fusion-menu-cell-cost-label", ("cost", cost));
    }

    private void SetCellInfoModifiers(List<ProtoId<CellModifierPrototype>> modifiers)
    {
        var message = _cell.GetCellModifiersString(modifiers);

        if (!FormattedMessage.TryFromMarkup(message, out var markup))
        {
            CellModifiersText.SetMessage(message);
            return;
        }

        CellModifiersText.SetMessage(markup);
    }
}
