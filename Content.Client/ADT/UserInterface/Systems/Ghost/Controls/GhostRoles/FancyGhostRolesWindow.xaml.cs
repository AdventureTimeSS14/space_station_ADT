using System.Linq;
using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Toolshed.Errors;
using Robust.Shared.Utility;

namespace Content.Client.ADT.UserInterface.Systems.Ghost.Controls.GhostRoles
{
    [GenerateTypedNameReferences]
    public sealed partial class FancyGhostRolesWindow : DefaultWindow
    {
        public event Action<GhostRoleInfo>? OnRoleRequestButtonClicked;
        public event Action<GhostRoleInfo>? OnRoleFollow;

        private Dictionary<(string name, string description), Collapsible> _collapsibleBoxes = new();
        private HashSet<(string name, string description)> _uncollapsedStates = new();

        public FancyGhostRolesWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void ClearEntries()
        {
            NoRolesMessage.Visible = true;
            EntryContainer.DisposeAllChildren();
            _collapsibleBoxes.Clear();
        }

        public void SaveCollapsibleBoxesStates()
        {
            _uncollapsedStates.Clear();
            foreach (var (key, collapsible) in _collapsibleBoxes)
            {
                if (collapsible.BodyVisible)
                {
                    _uncollapsedStates.Add(key);
                }
            }
        }

        public void RestoreCollapsibleBoxesStates()
        {
            foreach (var (key, collapsible) in _collapsibleBoxes)
            {
                collapsible.BodyVisible = _uncollapsedStates.Contains(key);
            }
        }

        public void AddEntry(string name, string description, bool hasAccess, GhostRoleCategory category, FormattedMessage? reason, IEnumerable<GhostRoleInfo> roles, SpriteSystem spriteSystem)
        {
            NoRolesMessage.Visible = false;

            var ghostRoleInfos = roles.ToList();
            var rolesCount = ghostRoleInfos.Count;

            var targetCategories = EntryContainer.Children.Where(x => x.Name == category.ToString());

            GridContainer? grid;

            if (targetCategories.Count() > 0)
            {
                if (targetCategories.First() is not GridContainer exsistingGrid)
                    throw new ArgumentNullException();

                grid = exsistingGrid;
            }
            else
            {
                grid = new GridContainer()
                {
                    Columns = 3,
                    HorizontalExpand = true,
                };
            }

            if (_uncollapsedStates.Contains((name, description)))
            {
                for (var i = 1; i <= roles.Count(); i++)
                {
                    var panel = new FancyGhostRolePanel(category)
                    {
                        ToolTip = Loc.GetString(description),
                    };
                    panel.SelectButton.Text = Loc.GetString(name);
                    panel.ExpandButtonPanel.Visible = i == roles.Count();
                    grid.AddChild(panel);
                }
            }
            else
            {
                var panel = new FancyGhostRolePanel(category)
                {
                    ToolTip = Loc.GetString(description),
                };

                panel.SelectButton.Text = Loc.GetString(name);
                panel.ExpandButtonPanel.Visible = true;
                grid.AddChild(panel);
            }

        }
    }
}
