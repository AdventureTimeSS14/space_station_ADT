using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.ADT.UserInterface.Systems.Ghost.Controls.GhostRoles
{
    [GenerateTypedNameReferences]
    public sealed partial class FancyGhostRolePanel : Control
    {
        public Color Color = Color.FromHex("#141F2F");
        public Color BorderColor = Color.FromHex("#4972A1");
        public Color HoveredColor = Color.FromHex("#4972A1");

        public GhostRoleInfo RoleInfo;

        public event Action<GhostRoleInfo>? OnRoleRequestButtonClicked;
        public event Action<GhostRoleInfo>? OnRoleFollow;

        public FancyGhostRolePanel(GhostRoleInfo info, GhostRoleCategory category)
        {
            RobustXamlLoader.Load(this);
            RoleInfo = info;

            SelectButton.OnPressed += args => OnRoleRequestButtonClicked?.Invoke(RoleInfo);
            FollowButton.OnPressed += args => OnRoleFollow?.Invoke(RoleInfo);


            // TODO Сделать разные цвета
            switch (category)
            {
                case GhostRoleCategory.Station:
                    {
                        break;
                    }
                case GhostRoleCategory.Visitor:
                    {
                        break;
                    }
                case GhostRoleCategory.Antag:
                    {
                        break;
                    }
            }

            UpdateColor();
        }

        public void UpdateColor()
        {
            var selectColors = (StyleBoxFlat) SelectButtonPanel.PanelOverride!;
            selectColors.BackgroundColor = SelectButton.IsHovered ? HoveredColor : Color;
            selectColors.BorderColor = BorderColor;

            var expandColors = (StyleBoxFlat) ExpandButtonPanel.PanelOverride!;
            expandColors.BackgroundColor = ExpandButton.IsHovered ? HoveredColor : Color;
            expandColors.BorderColor = BorderColor;


            var followColors = (StyleBoxFlat) FollowButtonPanel.PanelOverride!;
            followColors.BackgroundColor = FollowButton.IsHovered ? HoveredColor : Color;
            followColors.BorderColor = BorderColor;
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();
            UpdateColor();
        }
    }
}
