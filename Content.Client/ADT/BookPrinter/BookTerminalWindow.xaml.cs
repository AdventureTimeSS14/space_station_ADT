// Оригинал данного файла был сделан @temporaldarkness (discord). Код был взят с https://github.com/ss14-ganimed/ENT14-Master.

using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared.ADT.BookPrinter;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.ADT.BookPrinter
{
    [GenerateTypedNameReferences]
    public sealed partial class BookPrinterWindow : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entMan = default!;
        public event Action<BaseButton.ButtonEventArgs, PrintBookButton>? OnPrintBookButtonPressed;
        public event Action<GUIMouseHoverEventArgs, PrintBookButton>? OnPrintBookButtonMouseEntered;
        public event Action<GUIMouseHoverEventArgs, PrintBookButton>? OnPrintBookButtonMouseExited;

        private SharedBookPrinterEntry? _infoPanelEntry;

        public BookPrinterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            CloseInfoPanelButton.OnPressed += _ => HideInfoPanel();
        }


        private string FormatCooldownTime(TimeSpan timeSpan)
        {
            if (timeSpan.Hours > 0)
                return $"{timeSpan.Hours}ч {timeSpan.Minutes:D2}м {timeSpan.Seconds:D2}с";
            else if (timeSpan.Minutes > 0)
                return $"{timeSpan.Minutes}м {timeSpan.Seconds:D2}с";
            else
                return $"{timeSpan.Seconds}с";
        }

        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (BookPrinterBoundUserInterfaceState)state;

            UpdateBooksList(castState);
            UpdateContainerInfoWithCooldown(castState);

            CopyPasteButton.Text = Loc.GetString(castState.CopyPaste
                                    ? "book-printer-window-paste-button"
                                    : "book-printer-window-copy-button");

            UploadButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null || !castState.IsUploadAvailable;
            ClearButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;
            EjectButton.Disabled = castState.BookName is null || castState.WorkProgress is not null;
            CopyPasteButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;

            if (_infoPanelEntry != null && (castState.BookEntries == null || !castState.BookEntries.Any(e => e.Id == _infoPanelEntry.Id)))
                HideInfoPanel();
        }

        public void UpdateBooksList(BoundUserInterfaceState state)
        {
            var castState = (BookPrinterBoundUserInterfaceState)state;

            if (BooksList == null)
                return;

            BooksList.Children.Clear();

            if (castState.BookEntries is null)
                return;

            foreach (var entry in castState.BookEntries.OrderBy(r => r.Id))
            {
                // Создаем контейнер для каждой книги с красивым оформлением
                var bookContainer = new PanelContainer
                {
                    Margin = new Thickness(0, 2, 0, 2)
                };
                bookContainer.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(45, 45, 50),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(60, 60, 65)
                };

                var row = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Margin = new Thickness(8, 6, 8, 6)
                };

                // Иконка книги
                var bookIcon = new Label
                {
                    Text = Loc.GetString("book-printer-window-book-icon-small", ("id", entry.Id)),
                    MinSize = new Vector2(24, 0),
                    VerticalAlignment = VAlignment.Center,
                    Margin = new Thickness(0, 0, 8, 0)
                };

                // Кнопка печати
                var display = CutDescription(entry.Name ?? "");
                var button = new PrintBookButton(entry, display)
                {
                    HorizontalExpand = true,
                    MinSize = new Vector2(0, 32)
                };
                button.OnPressed += args => OnPrintBookButtonPressed?.Invoke(args, button);
                button.OnMouseEntered += args => OnPrintBookButtonMouseEntered?.Invoke(args, button);
                button.OnMouseExited += args => OnPrintBookButtonMouseExited?.Invoke(args, button);
                button.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;

                // Кнопка просмотра
                var viewButton = new Button
                {
                    Text = Loc.GetString("book-printer-window-view-icon"),
                    MinSize = new Vector2(40, 32),
                    MaxSize = new Vector2(40, 32),
                    Margin = new Thickness(6, 0, 0, 0),
                    Disabled = castState.WorkProgress is not null,
                    ToolTip = Loc.GetString("book-printer-view")
                };
                viewButton.OnPressed += _ => ShowBookInfo(entry);

                row.AddChild(bookIcon);
                row.AddChild(button);
                row.AddChild(viewButton);

                bookContainer.AddChild(row);
                BooksList.AddChild(bookContainer);
            }
        }

        public string CutDescription(string? text)
        {
            if (text is null)
                return "";

            if (text.Length <= 26)
                return text;

            return text.Substring(0, 25) + "...";
        }

        public void UpdateContainerInfoWithCooldown(BookPrinterBoundUserInterfaceState state)
        {
            ContainerInfo.Children.Clear();

            if (!state.IsUploadAvailable && state.IsCooldownEnabled)
            {
                // Панель кулдауна
                var cooldownPanel = new PanelContainer
                {
                    Margin = new Thickness(0, 4, 0, 4)
                };
                cooldownPanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(60, 40, 30),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(120, 80, 60)
                };

                var cooldownContainer = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    Margin = new Thickness(8, 8, 8, 8)
                };

                var timeText = FormatCooldownTime(state.CooldownRemaining);
                var blockedLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-cooldown-blocked-with-icon", ("text", Loc.GetString("book-printer-upload-blocked"))),
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(0, 0, 0, 4),
                    StyleClasses = { StyleNano.StyleClassLabelBig }
                };

                var timeLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-cooldown-time-with-icon", ("text", Loc.GetString("book-printer-cooldown-remaining", ("time", timeText)))),
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(0, 0, 0, 8),
                    StyleClasses = { StyleNano.StyleClassLabelSubText }
                };

                cooldownContainer.AddChild(blockedLabel);
                cooldownContainer.AddChild(timeLabel);

                // Добавляем прогресс-бар
                if (state.CooldownDuration.TotalSeconds > 0)
                {
                    var progressPercent = (state.CooldownDuration.TotalSeconds - state.CooldownRemaining.TotalSeconds) / state.CooldownDuration.TotalSeconds * 100;
                    var progressBar = new ProgressBar
                    {
                        MinValue = 0,
                        MaxValue = 100,
                        Value = (float)progressPercent,
                        Margin = new Thickness(8, 0, 8, 0),
                        HorizontalExpand = true,
                        MinSize = new Vector2(0, 8)
                    };
                    cooldownContainer.AddChild(progressBar);
                }

                cooldownPanel.AddChild(cooldownContainer);
                ContainerInfo.Children.Add(cooldownPanel);
                return; // Не показываем другую информацию во время кулдауна
            }

            UpdateContainerInfoContent(state);
        }

        public void UpdateContainerInfoContent(BookPrinterBoundUserInterfaceState state)
        {

            if (state.WorkProgress is not null)
            {
                // Панель прогресса работы
                var workPanel = new PanelContainer
                {
                    Margin = new Thickness(0, 4, 0, 4)
                };
                workPanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(60, 60, 30),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(120, 120, 60)
                };

                var workLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-working", ("progress", (int)(100.0f * (1 - state.WorkProgress)))),
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(8, 8, 8, 8)
                };

                workPanel.AddChild(workLabel);
                ContainerInfo.Children.Add(workPanel);
                return;
            }

            if (state.BookName is null)
            {
                // Панель "нет книги"
                var noBookPanel = new PanelContainer
                {
                    Margin = new Thickness(0, 4, 0, 4)
                };
                noBookPanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(40, 40, 40),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(80, 80, 80)
                };

                var noBookLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-no-book-loaded-text"),
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(8, 8, 8, 8)
                };

                noBookPanel.AddChild(noBookLabel);
                ContainerInfo.Children.Add(noBookPanel);
            }
            else
            {
                // Панель с информацией о книге
                var bookPanel = new PanelContainer
                {
                    Margin = new Thickness(0, 4, 0, 4)
                };
                bookPanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(45, 45, 50),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(80, 80, 85)
                };

                var bookPreview = new SpriteView
                {
                    Scale = new Vector2(2, 2),
                    OverrideDirection = Direction.South,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    Margin = new Thickness(8, 8, 8, 8)
                };
                if (_entMan.TryGetEntity(state.BookEntity, out var bookEntity))
                    bookPreview.SetEntity(bookEntity);

                var bookLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-book-name-with-icon", ("name", CutDescription(state.BookName))),
                    StyleClasses = { StyleNano.StyleClassLabelBig },
                    Margin = new Thickness(0, 0, 0, 4)
                };

                var bookSublabel = new Label
                {
                    Text = $"{CutDescription(state.BookDescription)}",
                    StyleClasses = { StyleNano.StyleClassLabelSecondaryColor },
                    Margin = new Thickness(0, 0, 0, 8)
                };

                var boxInfo = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    Margin = new Thickness(8, 8, 8, 8),
                    Children = {
                        bookLabel,
                        bookSublabel
                    }
                };

                var bookContainer = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { bookPreview, boxInfo }
                };

                bookPanel.AddChild(bookContainer);
                ContainerInfo.Children.Add(bookPanel);
            }

            // Панель состояния картриджа
            var cartridgePanel = new PanelContainer
            {
                Margin = new Thickness(0, 4, 0, 4)
            };

            if (state.CartridgeCharge is null)
            {
                cartridgePanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(60, 30, 30),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(120, 60, 60)
                };
                var noCartridgeLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-no-cartridge-with-icon", ("text", Loc.GetString("book-printer-window-no-cartridge-loaded-text"))),
                    FontColorOverride = Color.LightCoral,
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(8, 8, 8, 8)
                };
                cartridgePanel.AddChild(noCartridgeLabel);
                ContainerInfo.Children.Add(cartridgePanel);
                return;
            }
            else if (state.CartridgeCharge <= -10.0f)
            {
                cartridgePanel.PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(60, 30, 30),
                    BorderThickness = new Thickness(1),
                    BorderColor = new Color(120, 60, 60)
                };
                var emptyCartridgeLabel = new Label
                {
                    Text = Loc.GetString("book-printer-window-cartridge-empty-with-icon", ("text", Loc.GetString("book-printer-window-cartridge-empty"))),
                    FontColorOverride = Color.LightCoral,
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(8, 8, 8, 8)
                };
                cartridgePanel.AddChild(emptyCartridgeLabel);
                ContainerInfo.Children.Add(cartridgePanel);
                return;
            }

            // Нормальный уровень заряда
            var chargePercent = (int)(100 * state.CartridgeCharge);
            var chargeColor = chargePercent > 50 ? Color.LightGreen : chargePercent > 20 ? Color.Yellow : Color.LightCoral;
            var chargeIcon = chargePercent > 50 ? Loc.GetString("book-printer-window-cartridge-good-icon") :
                              chargePercent > 20 ? Loc.GetString("book-printer-window-cartridge-low-icon") :
                              Loc.GetString("book-printer-window-cartridge-empty-icon");

            cartridgePanel.PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = new Color(30, 60, 30),
                BorderThickness = new Thickness(1),
                BorderColor = new Color(60, 120, 60)
            };

            var chargeLabel = new Label
            {
                Text = Loc.GetString("book-printer-window-cartridge-charge-with-icon",
                    ("icon", chargeIcon),
                    ("text", Loc.GetString("book-printer-window-cartridge-charge", ("charge", chargePercent)))),
                FontColorOverride = chargeColor,
                HorizontalAlignment = HAlignment.Center,
                Margin = new Thickness(8, 8, 8, 8)
            };

            cartridgePanel.AddChild(chargeLabel);
            ContainerInfo.Children.Add(cartridgePanel);
        }

        public void ShowBookInfo(SharedBookPrinterEntry entry)
        {
            _infoPanelEntry = entry;

            InfoBookTitle.Text = Loc.GetString("book-printer-window-book-title-with-icon", ("title", entry.Name ?? string.Empty));
            InfoBookId.Text = Loc.GetString("book-printer-window-book-id-label", ("id", entry.Id));

            var content = entry.Content ?? string.Empty;
            if (content.Length > 2000)
                content = content[..2000] + "...";

            InfoBookContent.SetMessage(content);

            if (!BookInfoPanel.Visible)
            {
                BookInfoPanel.Visible = true;
                SetSize = new Vector2(MathF.Max(SetSize.X, 900), SetSize.Y);
                MinSize = new Vector2(MathF.Max(MinSize.X, 900), MinSize.Y);
            }
        }

        private void HideInfoPanel()
        {
            BookInfoPanel.Visible = false;
        }
    }

    public sealed class PrintBookButton : Button
    {
        public SharedBookPrinterEntry BookEntry { get; }

        public PrintBookButton(SharedBookPrinterEntry bookEntry, string text)
        {
            BookEntry = bookEntry;
            Text = text;

            StyleClasses.Add("OpenBoth");
            ToolTip = Loc.GetString("book-printer-print-tooltip");
        }
    }
}
