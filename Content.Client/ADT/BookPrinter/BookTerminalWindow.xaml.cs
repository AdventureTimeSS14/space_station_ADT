// Оригинал данного файла был сделан @temporaldarkness (discord). Код был взят с https://github.com/ss14-ganimed/ENT14-Master.

using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared.ADT.BookPrinter;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.ADT.BookPrinter
{
    [GenerateTypedNameReferences]
    public sealed partial class BookPrinterWindow : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entMan = default!;
        public event Action<BaseButton.ButtonEventArgs, PrintBookButton>? OnPrintBookButtonPressed;
        public event Action<GUIMouseHoverEventArgs, PrintBookButton>? OnPrintBookButtonMouseEntered;
        public event Action<GUIMouseHoverEventArgs, PrintBookButton>? OnPrintBookButtonMouseExited;

        private SharedBookPrinterEntry? _infoPanelEntry;

        public BookPrinterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            CloseInfoPanelButton.OnPressed += _ => HideInfoPanel();
        }

        private void UpdateCooldownUI(BookPrinterBoundUserInterfaceState state)
        {
            ClearCooldownUI();

            if (!state.IsUploadAvailable)
            {
                AddCooldownLabel(Loc.GetString("book-printer-upload-blocked"), "LabelSubText");
            }
            else if (!state.IsCooldownEnabled)
            {
                var timeText = FormatCooldownTime(state.CooldownRemaining);
                AddCooldownLabel(Loc.GetString("book-printer-upload-blocked"), "LabelBig");
                AddCooldownLabel(Loc.GetString("book-printer-cooldown-remaining", ("time", timeText)), "LabelSubText");

                AddCooldownProgressBar(state);
            }
        }

        private void ClearCooldownUI()
        {
            var toRemove = new List<Control>();
            foreach (Control child in ContainerInfo.Children)
            {
                if (child.Name?.StartsWith("cooldown_") == true)
                    toRemove.Add(child);
            }

            foreach (var control in toRemove)
                ContainerInfo.RemoveChild(control);
        }

        private void AddCooldownLabel(string text, string styleClass)
        {
            var label = new Label
            {
                Text = text,
                Name = $"cooldown_label_{ContainerInfo.ChildCount}",
                StyleClasses = { styleClass },
                HorizontalAlignment = HAlignment.Center
            };
            ContainerInfo.AddChild(label);
        }

        private void AddCooldownProgressBar(BookPrinterBoundUserInterfaceState state)
        {
            if (state.CooldownDuration.TotalSeconds <= 0)
                return;

            var progressBar = new ProgressBar
            {
                Name = "cooldown_progressbar",
                MinValue = 0,
                MaxValue = 100,
                Margin = new Thickness(0, 2, 0, 2),
                HorizontalExpand = true
            };

            ContainerInfo.AddChild(progressBar);
        }

        private string FormatCooldownTime(TimeSpan timeSpan)
        {
            if (timeSpan.Hours > 0)
                return $"{timeSpan.Hours}ч {timeSpan.Minutes:D2}м {timeSpan.Seconds:D2}с";
            else if (timeSpan.Minutes > 0)
                return $"{timeSpan.Minutes}м {timeSpan.Seconds:D2}с";
            else
                return $"{timeSpan.Seconds}с";
        }

        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (BookPrinterBoundUserInterfaceState)state;
            UpdateContainerInfo(castState);
            UpdateBooksList(castState);
            UpdateCooldownUI(castState);

            CopyPasteButton.Text = Loc.GetString(castState.CopyPaste
                                    ? "book-printer-window-paste-button"
                                    : "book-printer-window-copy-button");

            UploadButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null || !castState.IsUploadAvailable;
            ClearButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;
            EjectButton.Disabled = castState.BookName is null || castState.WorkProgress is not null;
            CopyPasteButton.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;

            if (_infoPanelEntry != null && (castState.BookEntries == null || !castState.BookEntries.Contains(_infoPanelEntry)))
                HideInfoPanel();
        }

        public void UpdateBooksList(BoundUserInterfaceState state)
        {
            var castState = (BookPrinterBoundUserInterfaceState)state;

            if (BooksList == null)
                return;

            BooksList.Children.Clear();

            if (castState.BookEntries is null)
                return;

            foreach (var entry in castState.BookEntries.OrderBy(r => r.Name))
            {
                var row = new BoxContainer { Orientation = LayoutOrientation.Horizontal };
                var display = $"#{entry.Id} {CutDescription(entry.Name ?? "")}";
                var button = new PrintBookButton(entry, display);
                button.OnPressed += args => OnPrintBookButtonPressed?.Invoke(args, button);
                button.OnMouseEntered += args => OnPrintBookButtonMouseEntered?.Invoke(args, button);
                button.OnMouseExited += args => OnPrintBookButtonMouseExited?.Invoke(args, button);
                button.Disabled = !castState.RoutineAllowed || castState.WorkProgress is not null;

                var button2 = new Button
                {
                    Text = Loc.GetString("book-printer-view"),
                    MinSize = new Vector2(70, 0),
                    Margin = new Thickness(6, 0, 0, 0),
                    Disabled = castState.WorkProgress is not null
                };
                button2.OnPressed += _ => ShowBookInfo(entry);

                row.AddChild(button);
                row.AddChild(button2);

                BooksList.AddChild(row);
            }
        }

        public string CutDescription(string? text)
        {
            if (text is null)
                return "";

            if (text.Length <= 10)
                return text;

            return text.Substring(0, 9) + "...";
        }

        public void UpdateContainerInfo(BookPrinterBoundUserInterfaceState state)
        {
            ContainerInfo.Children.Clear();

            if (state.WorkProgress is not null)
            {
                ContainerInfo.Children.Add(new Label { Text = Loc.GetString("book-printer-window-working", ("progress", (int)(100.0f * (1 - state.WorkProgress)))) });
                return;
            }

            if (state.BookName is null)
            {
                ContainerInfo.Children.Add(new Label { Text = Loc.GetString("book-printer-window-no-book-loaded-text") });
            }
            else
            {
                var bookPreview = new SpriteView
                {
                    Scale = new Vector2(2, 2),
                    OverrideDirection = Direction.South,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1
                };
                if (_entMan.TryGetEntity(state.BookEntity, out var bookEntity))
                    bookPreview.SetEntity(bookEntity);

                var bookLabel = new Label
                {
                    Text = $"{CutDescription(state.BookName)}"
                };

                var bookSublabel = new Label
                {
                    Text = $"{CutDescription(state.BookDescription)}",
                    StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                };

                var boxInfo = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    Children = {
                        new Control { MinSize = new Vector2(0, 10) },
                        bookLabel,
                        bookSublabel }
                };

                ContainerInfo.Children.Add(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { bookPreview, boxInfo }
                });
            }

            if (state.CartridgeCharge is null)
            {
                ContainerInfo.Children.Add(new Label { Text = Loc.GetString("book-printer-window-no-cartridge-loaded-text"), FontColorOverride = Color.DarkRed });
                return;
            }
            else if (state.CartridgeCharge <= -10.0f)
            {
                ContainerInfo.Children.Add(new Label { Text = Loc.GetString("book-printer-window-cartridge-empty"), FontColorOverride = Color.DarkRed });
                return;
            }
            ContainerInfo.Children.Add(new Label { Text = Loc.GetString("book-printer-window-cartridge-charge", ("charge", (int)(100 * state.CartridgeCharge))) });
        }

        public void ShowBookInfo(SharedBookPrinterEntry entry)
        {
            _infoPanelEntry = entry;

            InfoBookTitle.Text = entry.Name ?? string.Empty;
            InfoBookId.Text = $"#{entry.Id}";

            var content = entry.Content ?? string.Empty;
            if (content.Length > 2000)
                content = content[..2000] + "...";

            InfoBookContent.SetMessage(content);

            if (!BookInfoPanel.Visible)
            {
                BookInfoPanel.Visible = true;
                SetSize = new Vector2(MathF.Max(SetSize.X, 800), SetSize.Y);
                MinSize = new Vector2(MathF.Max(MinSize.X, 800), MinSize.Y);
            }
        }

        private void HideInfoPanel()
        {
            BookInfoPanel.Visible = false;
        }
    }

    public sealed class PrintBookButton : Button
    {
        public SharedBookPrinterEntry BookEntry { get; }

        public PrintBookButton(SharedBookPrinterEntry bookEntry, string text)
        {
            BookEntry = bookEntry;
            Text = text;
        }
    }
}
