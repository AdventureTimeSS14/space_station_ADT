using Content.Shared.ADT.Language;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;

namespace Content.Client.ADT.Language.UI;

[GenerateTypedNameReferences]
public sealed partial class LanguageMenuWindow : DefaultWindow
{
    [Dependency] private readonly EntityManager _entManager = default!;

    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    private readonly SharedLanguageSystem _language;

    private readonly List<EntryState> _entries = new();
    private readonly List<Option> _optionLists = new();

    public LanguageMenuWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _language = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<LanguageSystem>();

        Title = Loc.GetString("language-menu-window-title");

        var player = _playerManager.LocalSession?.AttachedEntity;

        if (_language.GetLanguages(player, out var understood, out var spoken, out var translatorUnderstood, out var translatorSpoken, out var current) && player.HasValue)
        {
            var ev = new LanguageMenuStateMessage(_entManager.GetNetEntity(player.Value), current, understood, translatorUnderstood);
            UpdateState(ev);
        }
    }

    public void UpdateState(LanguageMenuStateMessage state)
    {
        CurrentLanguageLabel.Text = Loc.GetString("language-menu-current-language", ("language", _language.GetLanguage(state.CurrentLanguage).LocalizedName));

        //OptionsList.RemoveAllChildren();
        List<string> options = state.Options;
        List<Option> optionList = _optionLists;
        foreach (var entry in _entries)
        {
            if (state.Options.Contains(entry.Language))
            {
                options.Remove(entry.Language);
                continue;
            }
            else
            {
                _entries.Remove(entry);

                foreach (var item in optionList)
                {
                    if (item.LanguageId == entry.Language)
                    {
                        _optionLists.Remove(item);
                        OptionsList.RemoveChild(item.PanelContainer);
                    }
                }
            }
        }

        if (options.Count > 0)
        {
            foreach (var language in options)
            {
                AddLanguageEntry(language);
            }
        }

        // Disable the button for the currently chosen language
        foreach (var entry in _entries)
        {
            if (entry.Button != null)
            {
                entry.Button.Disabled = entry.Language == state.CurrentLanguage || !_language.CanSpeak(_entManager.GetEntity(state.ComponentOwner), _language.GetLanguage(entry.Language));
                if (entry.Language == state.CurrentLanguage)
                    entry.Button.Text = Loc.GetString("language-choose-button-chosen");
                if (!_language.CanSpeak(_entManager.GetEntity(state.ComponentOwner), _language.GetLanguage(entry.Language)))
                    entry.Button.Text = Loc.GetString("language-choose-button-cannot");

                if (!state.Options.Contains(entry.Language) && state.TranslatorOptions.Contains(entry.Language))
                    entry.Button.ToolTip = Loc.GetString("language-choose-button-tooltip-translator");
                else
                    entry.Button.ToolTip = Loc.GetString("language-choose-button-tooltip-known");
            }
        }
    }

    private void AddLanguageEntry(string language)
    {
        var state = new EntryState { Language = language };
        var prototype = _language.GetLanguage(language);
        var container = new BoxContainer();
        container.Orientation = BoxContainer.LayoutOrientation.Vertical;

        // Create and add a header with the name and the button to select the language
        {
            var header = new BoxContainer();
            header.Orientation = BoxContainer.LayoutOrientation.Horizontal;

            header.Orientation = BoxContainer.LayoutOrientation.Horizontal;
            header.HorizontalExpand = true;
            header.SeparationOverride = 2;

            var name = new Label();
            name.Text = prototype.LocalizedName;
            if (prototype.Color != null)
                name.FontColorOverride = prototype.Color.Value;
            name.MinWidth = 50;
            name.HorizontalExpand = true;

            var button = new Button();
            button.Text = Loc.GetString("language-choose-button");
            button.OnPressed += _ => OnLanguageChosen(language);
            state.Button = button;

            header.AddChild(name);
            header.AddChild(button);

            container.AddChild(header);
        }

        // Create and add a collapsible description
        {
            var body = new CollapsibleBody();
            body.HorizontalExpand = true;
            body.Margin = new Thickness(4f, 4f);

            var description = new RichTextLabel();
            description.SetMessage(prototype.LocalizedDescription);
            description.HorizontalExpand = true;

            body.AddChild(description);

            var collapser = new Collapsible(Loc.GetString("language-menu-description-header"), body);
            collapser.Orientation = BoxContainer.LayoutOrientation.Vertical;
            collapser.HorizontalExpand = true;

            container.AddChild(collapser);
        }

        // Before adding, wrap the new container in a PanelContainer to give it a distinct look
        var wrapper = new PanelContainer();
        wrapper.StyleClasses.Add("PdaBorderRect");

        wrapper.AddChild(container);
        OptionsList.AddChild(wrapper);

        _entries.Add(state);

        var option = new Option();
        option.LanguageId = state.Language;
        option.PanelContainer = wrapper;

        _optionLists.Add(option);
    }

    private void OnLanguageChosen(string id)
    {
        var player = _entManager.GetNetEntity(_playerManager.LocalSession?.AttachedEntity);
        if (player == null)
            return;

        _language.SelectLanguage(player.Value, id);
    }

    private struct EntryState
    {
        public string Language;
        public Button? Button;
    }

    private struct Option
    {
        public string LanguageId;
        public PanelContainer PanelContainer;
    }

}
