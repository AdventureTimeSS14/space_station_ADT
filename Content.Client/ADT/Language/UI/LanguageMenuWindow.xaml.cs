using Content.Shared.ADT.Language;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using System.Linq;

namespace Content.Client.ADT.Language.UI;

[GenerateTypedNameReferences]
public sealed partial class LanguageMenuWindow : DefaultWindow
{
    private readonly SharedLanguageSystem _language;

    private readonly Dictionary<string, LanguageEntry> _entries = new();
    public EntityUid Owner = EntityUid.Invalid;

    public Action<string>? OnLanguageSelected;

    public LanguageMenuWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _language = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<LanguageSystem>();

        Title = Loc.GetString("language-menu-window-title");
    }

    public void UpdateState(string current, List<string> options, List<string> translator)
    {
        CurrentLanguageLabel.Text = Loc.GetString("language-menu-current-language", ("language", _language.GetLanguage(current).LocalizedName));

        List<LanguageEntry> entries = _entries.Values.ToList();

        foreach (var lng in options)
        {
            translator.Remove(lng);
        }
        foreach (var entry in entries)
        {
            if (options.Contains(entry.Language) || translator.Contains(entry.Language))
                continue;

            OptionsList.RemoveChild(entry);
            _entries.Remove(entry.Language);
        }

        if (options.Count > 0)
        {
            foreach (var language in options)
            {
                AddLanguageEntry(language);
            }
        }
        if (translator.Count > 0)
        {
            foreach (var language in translator)
            {
                AddLanguageEntry(language, true);
            }
        }

        // Disable the button for the currently chosen language
        foreach (var entry in _entries.Values)
        {
            entry.SelectButton.Disabled = entry.Language == current || !_language.CanSpeak(Owner, _language.GetLanguage(entry.Language));
            if (entry.Language == current)
                entry.SelectButton.Text = Loc.GetString("language-choose-button-chosen");
            if (!_language.CanSpeak(Owner, _language.GetLanguage(entry.Language)))
                entry.SelectButton.Text = Loc.GetString("language-choose-button-cannot");
        }
    }

    private void AddLanguageEntry(string language, bool translator = false)
    {
        if (_entries.ContainsKey(language))
            return;

        var prototype = _language.GetLanguage(language);

        var entry = new LanguageEntry(prototype, translator);
        entry.OnLanguageSelected += args => OnLanguageSelected?.Invoke(args);

        OptionsList.AddChild(entry);
        _entries.Add(language, entry);
    }
}
