using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.Language;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using System.Linq;

namespace Content.Client.ADT.Language.UI;

// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⡀
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣴⣿⣿⣿⣿⣿⣄
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⣴⣿⡿⠛⠉⠁⢀⠙⢿⣿⣆⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣴⣿⡿⠟⠉⢀⢀⢀⢀⢀⢀⠈⢻⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣴⣾⣿⣿
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣴⣾⣿⠿⠋⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⣿⣿⡄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣶⣿⣿⡿⠛⠉
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣴⣿⣿⡟⠃⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢻⣿⣷⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣤⣾⣿⣿⠿⠛⠁
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣰⣿⣿⡿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⣿⣿⡀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⣴⣿⣿⡿⠋⠁⢀⢀⢀⢀⢀⢀⠐
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⡀⣀⣼⣿⡿⠏⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⣶⣶⣶⣦⣤⣤⣄⣀⣀⢀⢀⢀⢀⣤⣾⣿⡿⠟⠁⢀⢀⢀⢀⢀⢀⢀⡠⠈
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣴⣿⣿⣿⣿⠟⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⣀⣠⣿⣿⡿⠿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣾⣿⣿⡿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠁
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢸⣿⡟⢹⣿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠒⣾⣿⣿⡿⠏⠁⢀⢀⢀⢀⢀⢀⢀⣭⣿⣿⣿⣿⠿⠿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⠈
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣾⣿⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣾⣿⣿⡟⠃⢀⢀⢀⢀⢀⢀⢀⣴⣿⣿⣿⡿⠟⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣼⣿⣿⡆⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣴⣿⣿⣿⠿⢀⢀⢀⢀⢀⢀⢀⣠⣾⣿⣿⣿⠟⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣇⠠⠤⠄
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⣿⣿⡿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⡟⢀⢀⢀⢀⢀⢀⢀⣠⣿⣿⣿⣿⠟⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠁⢀⢀⡀
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣰⣿⣿⡟⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⣿⣿⡏⢀⢀⢀⢀⢀⢀⢀⢰⣿⣿⣿⣿⡏⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠊
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣶⣶⣤⣴⣿⣿⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠘⣿⣿⣿⠇
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣄⣀⡀⢀⢀⢀⢀⢀⣼⣿⣿⣿⣿⣿⡿⠁⢀⢀⢀⢀⢀⢀⢀⢀⣀⣤⣶⣿⣶⣄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠉⠁
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣼⣿⣿⣿⣿⣿⣿⣶⣦⣀⢀⣿⣿⡇⢀⠉⠉⢀⢀⢀⢀⢀⢀⢀⢀⢀⣾⣿⣿⣿⣿⣿⣿⡆
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⣸⣿⣿⠉⠉⠉⣿⣿⣿⣿⣿⣿⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⣿⣿⣿⣿⣿⣿⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣤⣤⣤⣤⣤⣄⡀
// ⢀⢀⢀⢀⢀⣾⣿⣿⣿⣿⣿⠏⢀⢀⢀⢿⢿⣿⣿⣿⣿⣿⣿⣿⣶⣄⡀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀
// ⢀⢀⢀⣴⣿⣿⠟⠉⠉⠉⢀⢀⢀⢀⢀⢀⢀⢀⠉⢩⡿⠿⣿⣿⣿⣿⣿⣶⣤⡀⢀⢀⢀⠸⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀
// ⢀⣴⣿⣿⡿⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠘⢷⣦⣄⠈⠛⠿⢿⣿⣿⣿⣷⣄⡀⢀⠉⠻⢿⣿⣿⠿⠟⠁⢀⢀⢀⢀⡀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇
// ⢀⣿⣿⡏⢀⢀⢀⢀⢀⣴⣿⣿⣿⣦⡄⢀⢀⢀⢀⢀⢀⢀⠙⠛⠦⢀⡀⠉⠻⢿⣿⣿⣿⣦⣄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟
// ⢀⣿⣿⡇⢀⢀⢀⣠⣿⣿⣿⣿⣿⣿⣿⡆⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠁⠂⢀⢀⠘⠛⢿⣿⣿⣷⣦⣀⢀⢀⢀⢀⢀⢀⢀⠈⠻⣶⣄⣀⢀⠈⠛⣦⡀⢀⢀⢀⣠⣾⣷⢀⢀⢀⢀⢀⢀⢀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁
// ⢀⣿⣿⡇⢀⢀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠠⠄⢀⠈⠙⠿⣿⣿⣿⣦⣄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠛⠒⠒⠚⠛⠋⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠛⠿⢿⣿⣿⡿⠿⠛
// ⢀⣿⣿⡇⢀⢀⢀⠹⣿⣿⣿⣿⣿⣿⣿⠏⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⢀⠂⣠⡈⠛⢿⣿⣿⣿⣶⣄⡀
// ⢀⣿⣿⡇⢀⢀⢀⢀⠙⠻⣿⣿⣿⠟⠃⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠛⣿⣷⣿⣿⣿⣿⣿⣿⣷⣤⡀
// ⢀⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠛⣿⣿⣿⢻⣿⣿⣿⣿⣿⣷⣦⡀⢀⢀⣀⣀⣀
// ⢀⣿⣿⡇⢀⢀⢀⢀⢀⢀⣀⣤⣄⢀⢀⢀⢀⢀⢀⢀⢀⢠⣤⣄⣀⣀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣷⣶⣤⣄
// ⢰⣿⣿⡇⢀⢀⢀⢀⢀⢀⣿⣿⡿⠃⢀⢀⢀⢀⢀⢀⢀⢀⠘⠻⣿⣿⣦⣤⡀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⢸⣿⣿⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠻⣿⣿⣿⣿⣦⡀
// ⢸⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢹⣿⠙⣿⣿⣷⣦⣄⡀⢀⢀⢀⢀⢀⢀⣿⣿⣿⢸⣿⣿⢸⣿⣿⢹⣿⡏⣿⣿⣿⣿⣿⣿⣦⣝⣿⣿⣿⣿⡄
// ⢸⣿⣿⣇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀⣀⣀⢀⢀⢀⢸⣿⢀⣿⡇⢸⣿⡿⣿⣶⣦⣄⢀⢀⢀⣿⣿⣿⣼⣿⣿⢸⣿⣿⢸⣿⡇⢻⣿⣿⢸⣿⡏⠛⠿⢿⣿⣿⣿⣇⡀
// ⠈⣿⣿⣿⣷⣄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣠⣾⣿⣿⣿⣿⣷⣤⣸⣿⡄⣿⣷⢸⣿⡇⣿⣿⠙⠿⢿⣷⣤⣿⣿⣿⣿⣿⣿⣾⣿⣿⣸⣿⡇⢸⣿⣿⠈⣿⡇⢀⢀⢀⠙⠻⣿⣿⣷⡀
// ⢀⢻⣿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⢸⣿⡇⣿⣿⢀⢀⢀⠈⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣼⣿⣿⢀⣿⡇⢀⢀⢀⢀⢀⢸⣿⣿⣇
// ⢀⢀⠘⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⢀⢀⢀⢀⢀⢀⢀⠉⠹⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣿⡇⢀⢀⢀⢀⢀⠘⣿⣿⣿⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣀
// ⢀⢀⢀⢀⢀⠈⠉⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣀⢀⢀⢀⢀⢀⢀⢀⢀⠘⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⡇⢀⢀⢀⢀⢀⢀⢻⣿⣿⡆⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⣴⣶⣶⣾⣿⣿
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⡀⢀⢀⢀⢀⢀⢀⢀⠉⠙⠿⣿⣿⣽⣿⣇⢀⢀⢀⢀⢀⢀⢀⣿⣿⣇⢀⢀⢀⢀⢀⢀⢀⢀⢀⠐⠶⣤⡀⢀⢀⢀⣸⣿⡏⠙⠛⠛⠛
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠉⠛⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡛⢿⣿⣿⣿⣿⣿⣶⣤⡀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠛⠻⢿⣿⣶⣦⣀⢀⢀⢀⣿⣿⣿⡄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠻⢷⣦⣴⡿⠟⠁
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣤⣤⣀⡀⢀⢀⢀⢀⠉⠙⠿⣿⣿⣿⣿⣿⣿⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠉⠉
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⣾⣿⡿⠋⢀⢀⢀⢀⢀⢀⠈⠙⠿⣿⣿⣿⠿⠛⠉⠁⢀⢀⢀⢀⢀⢀⢀⠈⠉⠙⠛⠿⢿⣿⣿⣶⣤⡀⢀⢀⢀⢀⣿⣿⣿⣿⣿⣿⠃
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣾⣿⣿⠃⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⣿⠃⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠙⠻⣿⣿⣿⣤⢀⢀⢸⣿⣿⣿⡿⠟⠁
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢰⣿⣿⡟⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢠⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠙⠻⣿⣶⣦⣸⣿⣿⣿⠃
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣾⣿⣿⠁⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢸⡇⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠈⠻⢿⣿⣿⣿⣿⡄
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢸⣿⡄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠙⠿⣿⣿⣷⡀
// ⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣿⣿⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⣿⣷⡄⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⢀⠘⣿⣿⣿⣤
[GenerateTypedNameReferences]
public sealed partial class LanguageMenuWindow : FancyWindow
{
    private readonly SharedLanguageSystem _language;
    private readonly IPrototypeManager _proto;

    private readonly Dictionary<string, LanguageEntry> _entries = new();
    public EntityUid Owner = EntityUid.Invalid;

    public Action<string>? OnLanguageSelected;

    public LanguageMenuWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _language = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<LanguageSystem>();
        _proto = IoCManager.Resolve<IPrototypeManager>();

        Title = Loc.GetString("language-menu-window-title");
    }

    public void UpdateState(string current, Dictionary<string, LanguageKnowledge> options, Dictionary<string, LanguageKnowledge> translator)
    {
        CurrentLanguageLabel.Text = Loc.GetString("language-menu-current-language", ("language", _language.GetLanguage(current).LocalizedName));

        List<LanguageEntry> entries = _entries.Values.ToList();

        foreach (var entry in entries)
        {
            if (options.ContainsKey(entry.Language) || translator.ContainsKey(entry.Language))
                continue;

            OptionsList.RemoveChild(entry);
            _entries.Remove(entry.Language);
        }
        foreach (var item in translator.ToList())
        {
            if (options.ContainsKey(item.Key) && options[item.Key] >= translator[item.Key])
                translator.Remove(item.Key);
        }

        if (options.Count > 0)
        {
            var list = options.ToList();
            list.Sort((x, y) => _proto.Index<LanguagePrototype>(x.Key).LocalizedName[0].CompareTo(_proto.Index<LanguagePrototype>(y.Key).LocalizedName[0]));
            list.Sort((x, y) => _proto.Index<LanguagePrototype>(y.Key).Priority.CompareTo(_proto.Index<LanguagePrototype>(x.Key).Priority));
            list.Sort((x, y) => _language.CanSpeak(Owner, y.Key).CompareTo(_language.CanSpeak(Owner, x.Key)));
            list.Sort((x, y) => translator.ContainsKey(x.Key).CompareTo(translator.ContainsKey(y.Key)));

            foreach (var language in list)
            {
                AddLanguageEntry(language.Key, translator.ContainsKey(language.Key));
            }
        }

        // Disable the button for the currently chosen language
        foreach (var entry in _entries.Values)
        {
            entry.SelectButton.Disabled = entry.Language == current || !_language.CanSpeak(Owner, _language.GetLanguage(entry.Language));
            if (entry.Language == current)
                entry.SelectButton.Text = Loc.GetString("language-choose-button-chosen");
            if (!_language.CanSpeak(Owner, _language.GetLanguage(entry.Language)))
                entry.SelectButton.Text = Loc.GetString("language-choose-button-cannot");
        }
    }

    private void AddLanguageEntry(string language, bool translator = false)
    {
        if (_entries.ContainsKey(language))
            return;

        var prototype = _language.GetLanguage(language);

        var entry = new LanguageEntry(prototype, translator);
        entry.OnLanguageSelected += args => OnLanguageSelected?.Invoke(args);

        OptionsList.AddChild(entry);
        _entries.Add(language, entry);
    }
}
