using Content.Client.Stylesheets;
using Content.Shared.ADT.CCVar;
using Content.Shared.ADT.Supermatter.Components;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using System.Linq;

namespace Content.Client.ADT.Supermatter.Consoles;

[GenerateTypedNameReferences]
public sealed partial class SupermatterEntryContainer : BoxContainer
{
    public NetEntity NetEntity;

    private readonly IConfigurationManager _config;
    private readonly IEntityManager _entManager;
    private readonly IResourceCache _cache;

    private readonly Dictionary<string, (Label label, ProgressBar bar, PanelContainer border, float leftSize, float rightSize, Color leftColor, Color middleColor, Color rightColor)>? _engineDictionary;
    private readonly List<(SupermatterGasBarContainer Bar, Gas Gas)> _gasBarData;
    private readonly List<(BoxContainer Container, Button Button, TextureRect Arrow)> _expandDetails;

    // Colors
    private readonly Color _colorGray = Color.Gray;
    private readonly Color _colorSlate = Color.LightSlateGray;
    private readonly Color _colorRed = StyleNano.DangerousRedFore;
    private readonly Color _colorOrange = StyleNano.ConcerningOrangeFore;
    private readonly Color _colorGreen = StyleNano.GoodGreenFore;
    private readonly Color _colorTurquoise = Color.FromHex("#00fff7");

    // Arrow icons
    private readonly string _arrowUp = "/Textures/ADT/Interface/arrows.rsi/arrow_up.png";
    private readonly string _arrowDown = "/Textures/ADT/Interface/arrows.rsi/arrow_down.png";

    // Supermatter base values
    private readonly float _radiationBase;
    private readonly float _temperatureLimitBase;
    private readonly float _wasteBase;

    // Save focus data values so we don't update too often
    private SupermatterFocusData _focusData;

    // Other saved variables
    private bool _showAllGases;

    public SupermatterEntryContainer(NetEntity uid)
    {
        RobustXamlLoader.Load(this);

        _config = IoCManager.Resolve<IConfigurationManager>();
        _entManager = IoCManager.Resolve<IEntityManager>();
        _cache = IoCManager.Resolve<IResourceCache>();

        NetEntity = uid;

        #region List/Dictionary Definitions

        // Set the engine dictionary
        _engineDictionary = new()
        {
            { "integrity",   ( IntegrityBarLabel,   IntegrityBar,   IntegrityBarBorder,   0.9f, 0.1f, _colorRed,       _colorOrange, _colorGreen ) },
            { "power",       ( PowerBarLabel,       PowerBar,       PowerBarBorder,       0.9f, 0.1f, _colorGreen,     _colorOrange, _colorRed   ) },
            { "radiation",   ( RadiationBarLabel,   RadiationBar,   RadiationBarBorder,   0.1f, 0.9f, _colorGreen,     _colorOrange, _colorRed   ) },
            { "moles",       ( MolesBarLabel,       MolesBar,       MolesBarBorder,       0.5f, 0.5f, _colorGreen,     _colorOrange, _colorRed   ) },
            { "temperature", ( TemperatureBarLabel, TemperatureBar, TemperatureBarBorder, 0.9f, 0.1f, _colorTurquoise, _colorGreen,  _colorRed   ) },
            { "waste",       ( WasteBarLabel,       WasteBar,       WasteBarBorder,       0.5f, 0.5f, _colorGreen,     _colorOrange, _colorRed   ) }
        };

        // Set the gas bar data
        _gasBarData = [];
        var gasData = Enum.GetValues<Gas>();

        foreach (var gas in gasData)
        {
            var data = (new SupermatterGasBarContainer(gas), gas);
            _gasBarData.Add(data);
        }

        // Set the container, button, and arrow texture for details expansion
        _expandDetails = new()
        {
            ( IntegrityDetailsContainer, IntegrityButton, IntegrityButtonArrow ),
            ( PowerDetailsContainer, PowerButton, PowerButtonArrow ),
            ( RadiationDetailsContainer, RadiationButton, RadiationButtonArrow ),
            ( TemperatureLimitDetailsContainer, TemperatureLimitButton, TemperatureLimitButtonArrow ),
            ( WasteDetailsContainer, WasteButton, WasteButtonArrow )
        };

        var mainLabels = new List<Label>()
        {
            IntegrityLabel,
            PowerLabel,
            RadiationLabel,
            MolesLabel,
            TemperatureLabel,
            TemperatureLimitLabel,
            WasteLabel,
            AbsorptionLabel
        };

        var barLabels = new List<Label>()
        {
            IntegrityBarLabel,
            IntegrityHealingInfoLabel,
            PowerBarLabel,
            PowerDecayInfoLabel,
            RadiationBarLabel,
            RadiationBaseInfoLabel,
            RadiationPowerInfoLabel,
            MolesBarLabel,
            TemperatureBarLabel,
            TemperatureLimitBarLabel,
            TemperatureLimitBaseInfoLabel,
            TemperatureLimitGasInfoLabel,
            WasteBarLabel,
            WasteBaseInfoLabel,
            WasteGasInfoLabel,
            AbsorptionBarLabel
        };

        var detailLabels = new List<Label>()
        {
            IntegrityHealingLabel,
            PowerDecayLabel,
            RadiationBaseLabel,
            RadiationPowerLabel,
            TemperatureLimitBaseLabel,
            TemperatureLimitGasLabel,
            WasteBaseLabel,
            WasteGasLabel
        };

        #endregion

        // Load values and set base labels
        _radiationBase = _config.GetCVar(ADTCCVars.SupermatterRadsBase);
        _temperatureLimitBase = Atmospherics.T0C + _config.GetCVar(ADTCCVars.SupermatterHeatPenaltyThreshold);
        _wasteBase = 1f;

        RadiationBaseInfoLabel.Text = Loc.GetString("supermatter-console-window-label-radiation-bar", ("radiation", _radiationBase.ToString("0.00")));
        TemperatureLimitBaseInfoLabel.Text = Loc.GetString("supermatter-console-window-label-temperature-bar", ("temperature", _temperatureLimitBase.ToString("0.00")));
        WasteBaseInfoLabel.Text = Loc.GetString("supermatter-console-window-label-waste-bar", ("waste", _wasteBase.ToString("0.00")));

        // Load fonts
        var headerFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var monoFont = new VectorFont(_cache.GetResource<FontResource>("/EngineFonts/NotoSans/NotoSansMono-Regular.ttf"), 10);

        // Set fonts and font colors
        SupermatterNameLabel.FontOverride = headerFont;
        SupermatterStatusLabel.FontOverride = normalFont;
        ShowAllGasLabel.FontOverride = normalFont;

        IntegrityHealingInfoLabel.FontColorOverride = _colorGreen;
        RadiationBaseInfoLabel.FontColorOverride = _colorGreen;
        TemperatureLimitBaseInfoLabel.FontColorOverride = _colorGreen;
        WasteBaseInfoLabel.FontColorOverride = _colorRed;

        foreach (var label in mainLabels)
        {
            label.FontOverride = normalFont;
            label.FontColorOverride = _colorGray;
        }

        foreach (var label in barLabels)
        {
            label.FontOverride = monoFont;
        }

        foreach (var label in detailLabels)
        {
            label.FontOverride = normalFont;
            label.FontColorOverride = _colorSlate;
        }

        // Set other variables
        _showAllGases = false;

        // On click
        foreach (var detail in _expandDetails)
        {
            detail.Button.OnButtonUp += args =>
            {
                detail.Container.Visible = !detail.Container.Visible;
                detail.Arrow.TexturePath = detail.Container.Visible ? _arrowUp : _arrowDown;
            };
        }

        ShowAllGasButton.OnButtonUp += args =>
        {
            _showAllGases = !_showAllGases;
        };
    }

    public void UpdateEntry(SupermatterConsoleEntry entry, bool isFocus, SupermatterFocusData? focusData = null)
    {
        NetEntity = entry.NetEntity;

        // Update supermatter name
        SupermatterNameLabel.Text = Loc.GetString("supermatter-console-window-label-sm", ("name", entry.EntityName));

        // Update supermatter status
        var statusText = entry.EntityStatus.ToString().ToLower();
        SupermatterStatusLabel.Text = Loc.GetString($"supermatter-console-window-status-{statusText}");

        SupermatterStatusLabel.FontColorOverride = entry.EntityStatus switch
        {
            >= SupermatterStatusType.Danger => StyleNano.DangerousRedFore,
            >= SupermatterStatusType.Caution => StyleNano.ConcerningOrangeFore,
            SupermatterStatusType.Normal => StyleNano.GoodGreenFore,
            SupermatterStatusType.Inactive => Color.DarkGray,
            _ => StyleNano.DisabledFore
        };

        // Focus updates
        FocusContainer.Visible = isFocus && focusData != null;

        if (isFocus)
        {
            if (focusData != null && !focusData.Value.Equals(_focusData) && _engineDictionary != null)
            {
                _focusData = focusData.Value;

                // Update the bar values every time
                Dictionary<string, float> engineBarData = new()
                {
                    { "integrity",   _focusData.Integrity },
                    { "power",       _focusData.Power },
                    { "radiation",   _focusData.Radiation },
                    { "moles",       _focusData.GasStorage.TotalMoles },
                    { "temperature", _focusData.GasStorage.Temperature },
                    { "waste",       _focusData.HeatModifier }
                };

                #region Main Bars

                // Engine bars
                foreach (var bar in _engineDictionary)
                {
                    var current = bar.Value;
                    var value = engineBarData[bar.Key];
                    UpdateEngineBar(current.bar, current.border, value, current.leftSize, current.rightSize, current.leftColor, current.middleColor, current.rightColor);

                    if (bar.Key == "power")
                        continue;

                    current.label.Text = Loc.GetString($"supermatter-console-window-label-{bar.Key}-bar", (bar.Key, value.ToString("0.00")));
                }

                // Gas bars
                var gases = Enum.GetValues<Gas>();
                var gasData = new List<((SupermatterGasBarContainer Bar, Gas Gas) GasBarData, float Moles)>();

                foreach (var gas in gases)
                {
                    var gasId = (int)gas;
                    var moles = _focusData.GasStorage.GetMoles(gas);
                    var data = _gasBarData.ElementAt(gasId);

                    gasData.Add((data, moles));
                    data.Bar.UpdateEntry(gas, _focusData);

                    // Only show gases above 0%, unless "show all gases" is enabled
                    data.Bar.Visible = moles > 0f || _showAllGases;
                }

                var gasSort = gasData.OrderByDescending(x => x.Moles).ThenBy(x => x.GasBarData.Gas);
                GasTable.RemoveAllChildren();

                foreach (var (gasBarData, moles) in gasSort)
                    GasTable.AddChild(gasBarData.Bar);

                #endregion

                #region Special Cases & Detailed Information

                // Integrity
                var integrityHealing = float.Abs(_focusData.HeatHealing);
                IntegrityHealingInfoLabel.Text = Loc.GetString("supermatter-console-window-label-integrity-bar", ("integrity", integrityHealing.ToString("0.00")));

                // Internal energy
                var powerValue = engineBarData["power"];
                var powerPrefix = powerValue switch { >= 1000 => "G", >= 1 => "M", _ => "" };
                var powerMultiplier = powerValue switch { >= 1000 => 0.001, >= 1 => 1, _ => 1000 };
                _engineDictionary["power"].label.Text = Loc.GetString(
                    "supermatter-console-window-label-power-bar",
                    ("power", (powerValue * powerMultiplier).ToString("0.000")),
                    ("prefix", powerPrefix));

                var powerLossValue = _focusData.PowerLoss > 0 ? -_focusData.PowerLoss : _focusData.PowerLoss;
                var powerLossPrefix = powerLossValue switch { <= -1000 => "G", <= -1 => "M", _ => "" };
                var powerLossMultiplier = powerLossValue switch { <= -1000 => 0.001, <= -1 => 1, _ => 1000 };
                PowerDecayInfoLabel.Text = Loc.GetString(
                    "supermatter-console-window-label-power-bar",
                    ("power", (powerLossValue * powerLossMultiplier).ToString("0.000")),
                    ("prefix", powerLossPrefix));
                PowerDecayInfoLabel.FontColorOverride = GetDetailColor(powerLossValue);

                // Radiation emission
                var radiationPower = _focusData.Radiation - _radiationBase;
                RadiationPowerInfoLabel.Text = Loc.GetString("supermatter-console-window-label-radiation-bar", ("radiation", radiationPower.ToString("0.00")));
                RadiationPowerInfoLabel.FontColorOverride = GetDetailColor(radiationPower);

                // Temperature limit
                var temperatureLimit = _focusData.TemperatureLimit;
                TemperatureBar.MaxValue = temperatureLimit;
                TemperatureLimitBarLabel.Text = Loc.GetString("supermatter-console-window-label-temperature-bar", ("temperature", temperatureLimit.ToString("0.00")));

                var temperatureLimitGas = temperatureLimit - _temperatureLimitBase;
                TemperatureLimitGasInfoLabel.Text = Loc.GetString("supermatter-console-window-label-temperature-bar", ("temperature", temperatureLimitGas.ToString("0.00")));
                TemperatureLimitGasInfoLabel.FontColorOverride = GetDetailColor(temperatureLimitGas);

                // Waste multiplier
                var wasteGas = _focusData.GasHeatModifier;
                WasteGasInfoLabel.Text = Loc.GetString("supermatter-console-window-label-waste-bar", ("waste", wasteGas.ToString("0.00")));
                WasteGasInfoLabel.FontColorOverride = GetDetailColor(wasteGas, true);

                // Absorption ratio
                var absorptionRatio = _focusData.AbsorptionRatio;
                AbsorptionBarLabel.Text = Loc.GetString("supermatter-console-window-label-absorption-bar", ("absorption", absorptionRatio.ToString("0")));

                #endregion
            }
        }
    }

    private static void UpdateEngineBar(ProgressBar bar, PanelContainer border, float value, float leftSize, float rightSize, Color leftColor, Color middleColor, Color rightColor)
    {
        var clamped = Math.Clamp(value, bar.MinValue, bar.MaxValue);

        var normalized = clamped / bar.MaxValue;
        var leftHsv = Color.ToHsv(leftColor);
        var middleHsv = Color.ToHsv(middleColor);
        var rightHsv = Color.ToHsv(rightColor);

        // Ensure leftSize and rightSize add up to 1.0 or the transition won't be smooth
        var minColor = new Vector4(0, 0, 0, 0);
        var maxColor = new Vector4(1, 1, 1, 1);
        Color finalColor;

        if (normalized <= leftSize)
        {
            normalized /= leftSize; // Adjust range to 0.0 to 1.0
            var calcColor = Vector4.Lerp(leftHsv, middleHsv, normalized);
            var clampedColor = Vector4.Clamp(calcColor, minColor, maxColor);
            finalColor = Color.FromHsv(clampedColor);
        }

        else
        {
            normalized = (normalized - leftSize) / rightSize; // Adjust range to 0.0 to 1.0
            var calcColor = Vector4.Lerp(middleHsv, rightHsv, normalized);
            var clampedColor = Vector4.Clamp(calcColor, minColor, maxColor);
            finalColor = Color.FromHsv(clampedColor);
        }

        // Check if null first to avoid repeatedly creating this.
        bar.ForegroundStyleBoxOverride ??= new StyleBoxFlat();
        border.PanelOverride ??= new StyleBoxFlat();

        var barOverride = (StyleBoxFlat)bar.ForegroundStyleBoxOverride;
        barOverride.BackgroundColor = finalColor;

        var panelOverride = (StyleBoxFlat)border.PanelOverride;
        panelOverride.BackgroundColor = finalColor;

        bar.Value = clamped;
    }

    private Color GetDetailColor(float value, bool invert = false)
    {
        var color = value switch
        {
            >= 0 => invert ? _colorRed : _colorGreen,
            _ => invert ? _colorGreen : _colorRed
        };

        return color;
    }
}
