using Content.Client.Stylesheets;
using Content.Shared.ADT.CCVar;
using Content.Shared.CCVar;
using Content.Shared.ADT.Supermatter.Components;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Prototypes;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client.ADT.Supermatter.Consoles;

[GenerateTypedNameReferences]
public sealed partial class SupermatterGasBarContainer : BoxContainer
{
    private readonly IConfigurationManager _config;
    private readonly IPrototypeManager _proto;
    private readonly IResourceCache _cache;

    // Colors
    private readonly Color _colorGray = Color.Gray;
    private readonly Color _colorSlate = Color.LightSlateGray;
    private readonly Color _colorRed = StyleNano.DangerousRedFore;
    private readonly Color _colorGreen = StyleNano.GoodGreenFore;

    // Arrow icons
    private readonly string _arrowUp = "/Textures/ADT/Interface/arrows.rsi/arrow_up.png";
    private readonly string _arrowDown = "/Textures/ADT/Interface/arrows.rsi/arrow_down.png";

    public SupermatterGasBarContainer(Gas gas)
    {
        RobustXamlLoader.Load(this);

        _config = IoCManager.Resolve<IConfigurationManager>();
        _proto = IoCManager.Resolve<IPrototypeManager>();
        _cache = IoCManager.Resolve<IResourceCache>();

        var gasId = (int)gas;
        var gasProto = _proto.Index<GasPrototype>(gasId.ToString());

        // List definitions
        var detailLabels = new List<Label>()
        {
            TransmitLabel,
            WasteLabel,
            PowerLabel,
            HeatLabel
        };

        var detailInfoLabels = new List<Label>()
        {
            TransmitInfoLabel,
            WasteInfoLabel,
            PowerInfoLabel,
            HeatInfoLabel
        };

        // Load fonts
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var monoFont = new VectorFont(_cache.GetResource<FontResource>("/EngineFonts/NotoSans/NotoSansMono-Regular.ttf"), 10);

        // Set fonts and font colors
        GasLabel.FontOverride = normalFont;
        HeaderLabel.FontOverride = normalFont;
        GasBarLabel.FontOverride = monoFont;

        GasLabel.FontColorOverride = _colorGray;

        foreach (var label in detailLabels)
        {
            label.FontOverride = normalFont;
            label.FontColorOverride = _colorSlate;
        }

        foreach (var label in detailInfoLabels)
        {
            label.FontOverride = monoFont;
        }

        // Set bar colors
        GasBar.ForegroundStyleBoxOverride = new StyleBoxFlat();
        GasBarBorder.PanelOverride = new StyleBoxFlat();

        var color = Color.FromHex("#" + gasProto.Color);

        var barOverride = (StyleBoxFlat)GasBar.ForegroundStyleBoxOverride;
        barOverride.BackgroundColor = color;

        var borderOverride = (StyleBoxFlat)GasBarBorder.PanelOverride;
        borderOverride.BackgroundColor = color;

        // Set labels
        var gasData = SupermatterGasData.GasData[gas];

        GasLabel.Text = Loc.GetString(gasProto.Name) + ":";

        var transmitModifier = gasData.TransmitModifier / 5;
        TransmitInfoLabel.Text = Loc.GetString("supermatter-console-window-label-gas-transmit-bar", ("transmit", transmitModifier.ToString("+0.0;-0.0")));
        TransmitInfoLabel.FontColorOverride = GetDetailColor(transmitModifier);

        var heatPenalty = (gasData.HeatPenalty - 1) * 100;
        WasteInfoLabel.Text = Loc.GetString("supermatter-console-window-label-gas-waste-bar", ("waste", heatPenalty.ToString("+0;-0")));
        WasteInfoLabel.FontColorOverride = GetDetailColor(heatPenalty, true);

        var powerMix = gasData.PowerMixRatio;
        var tempFactor = powerMix > 0.8 ? 50f : 30f;
        powerMix = 1f * tempFactor / Atmospherics.T0C * powerMix * 15;
        PowerInfoLabel.Text = Loc.GetString("supermatter-console-window-label-gas-power-bar", ("power", powerMix.ToString("+0.00;-0.00")));
        PowerInfoLabel.FontColorOverride = GetDetailColor(powerMix);

        var heatResistance = (gasData.HeatResistance - 1) * (Atmospherics.T0C + _config.GetCVar(ADTCCVars.SupermatterHeatPenaltyThreshold));
        HeatInfoLabel.Text = Loc.GetString("supermatter-console-window-label-gas-heat-bar", ("heat", heatResistance.ToString("+0.00;-0.00")));
        HeatInfoLabel.FontColorOverride = GetDetailColor(heatResistance);

        // Set visibility
        TransmitContainer.Visible = transmitModifier != 0;
        WasteContainer.Visible = heatPenalty != 0;
        PowerContainer.Visible = powerMix != 0;
        HeatContainer.Visible = heatResistance != 0;

        // On click
        GasButton.OnButtonUp += args =>
        {
            DetailsContainer.Visible = !DetailsContainer.Visible;
            GasButtonArrow.TexturePath = DetailsContainer.Visible ? _arrowUp : _arrowDown;
        };
    }

    public void UpdateEntry(Gas gas, SupermatterFocusData focusData)
    {
        var value = focusData.GasStorage.GetMoles(gas) / focusData.GasStorage.TotalMoles * 100;

        GasBar.Value = value;
        GasBarLabel.Text = Loc.GetString("supermatter-console-window-label-gas-bar", ("gas", value.ToString("0.00")));
    }

    private Color GetDetailColor(float value, bool invert = false)
    {
        var color = value switch
        {
            >= 0 => invert ? _colorRed : _colorGreen,
            _ => invert ? _colorGreen : _colorRed
        };

        return color;
    }
}
