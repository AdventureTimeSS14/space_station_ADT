using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.Supermatter.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Content.Client.ADT.Supermatter.Consoles;

[GenerateTypedNameReferences]
public sealed partial class SupermatterConsoleWindow : FancyWindow
{
    private readonly IEntityManager _entManager;

    private readonly EntityUid? _owner;
    private NetEntity? _trackedEntity;
    private SupermatterConsoleEntry[]? _supermatters = null;

    public event Action<NetEntity?>? SendFocusChangeMessageAction;

    private bool _autoScrollActive = false;
    private bool _autoScrollAwaitsUpdate = false;

    public SupermatterConsoleWindow(SupermatterConsoleBoundUserInterface userInterface, EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _owner = owner;

        // Set the tracked supermatter for persistence
        if (_entManager.TryGetComponent<SupermatterConsoleComponent>(_owner, out var console))
            _trackedEntity = console.FocusSupermatter;

        // Set supermatter monitoring message action
        SendFocusChangeMessageAction += userInterface.SendFocusChangeMessage;
    }

    public void UpdateUI(SupermatterConsoleEntry[] supermatters, SupermatterFocusData? focusData)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<SupermatterConsoleComponent>(_owner.Value, out var console))
            return;

        if (_trackedEntity != focusData?.NetEntity)
        {
            SendFocusChangeMessageAction?.Invoke(_trackedEntity);
            focusData = null;
        }

        // Retain supermatter data for use inbetween updates
        _supermatters = supermatters;

        // Clear excess children from the tables
        var supermattersCount = _supermatters.Length;

        while (SupermattersTable.ChildCount > supermattersCount)
            SupermattersTable.RemoveChild(SupermattersTable.GetChild(SupermattersTable.ChildCount - 1));

        // Update all entries in each table
        for (var index = 0; index < _supermatters.Length; index++)
        {
            var entry = _supermatters.ElementAt(index);
            UpdateUIEntry(entry, index, SupermattersTable, console, focusData);
        }

        // If no alerts are active, display a message
        if (supermattersCount == 0)
        {
            var label = new RichTextLabel()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
            };

            label.SetMarkup(Loc.GetString("supermatter-console-window-no-supermatters"));

            SupermattersTable.AddChild(label);
        }

        // Auto-scroll re-enable
        if (_autoScrollAwaitsUpdate)
        {
            _autoScrollActive = true;
            _autoScrollAwaitsUpdate = false;
        }
    }

    private void UpdateUIEntry(SupermatterConsoleEntry entry, int index, Control table, SupermatterConsoleComponent console, SupermatterFocusData? focusData = null)
    {
        // Make new UI entry if required
        if (index >= table.ChildCount)
        {
            var newEntryContainer = new SupermatterEntryContainer(entry.NetEntity);

            // On click
            newEntryContainer.FocusButton.OnButtonUp += args =>
            {
                if (_trackedEntity == newEntryContainer.NetEntity)
                    _trackedEntity = null;
                else
                    _trackedEntity = newEntryContainer.NetEntity;

                // Send message to console that the focus has changed
                SendFocusChangeMessageAction?.Invoke(_trackedEntity);
            };

            // Add the entry to the current table
            table.AddChild(newEntryContainer);
        }

        // Update values and UI elements
        var tableChild = table.GetChild(index);

        if (tableChild is not SupermatterEntryContainer)
        {
            table.RemoveChild(tableChild);
            UpdateUIEntry(entry, index, table, console, focusData);

            return;
        }

        var entryContainer = (SupermatterEntryContainer)tableChild;

        entryContainer.UpdateEntry(entry, entry.NetEntity == _trackedEntity, focusData);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        AutoScrollToFocus();
    }

    private void AutoScrollToFocus()
    {
        if (!_autoScrollActive)
            return;

        if (SupermattersTable.Parent is not ScrollContainer scroll)
            return;

        if (!TryGetVerticalScrollbar(scroll, out var vScrollbar))
            return;

        if (!TryGetNextScrollPosition(out float? nextScrollPosition))
            return;

        vScrollbar.ValueTarget = nextScrollPosition.Value;

        if (MathHelper.CloseToPercent(vScrollbar.Value, vScrollbar.ValueTarget))
            _autoScrollActive = false;
    }

    private static bool TryGetVerticalScrollbar(ScrollContainer scroll, [NotNullWhen(true)] out VScrollBar? vScrollBar)
    {
        vScrollBar = null;

        foreach (var child in scroll.Children)
        {
            if (child is not VScrollBar castChild)
                continue;

            vScrollBar = castChild;
            return true;
        }

        return false;
    }

    private bool TryGetNextScrollPosition([NotNullWhen(true)] out float? nextScrollPosition)
    {
        nextScrollPosition = null;

        if (SupermattersTable.Parent is not ScrollContainer scroll)
            return false;

        if (scroll.Children.ElementAt(0) is not BoxContainer container ||
            !container.Children.Any())
            return false;

        // Exit if the heights of the children haven't been initialized yet
        if (!container.Children.Any(x => x.Height > 0))
            return false;

        nextScrollPosition = 0;

        foreach (var control in container.Children)
        {
            if (control == null || control is not SupermatterEntryContainer)
                continue;

            if (((SupermatterEntryContainer)control).NetEntity == _trackedEntity)
                return true;

            nextScrollPosition += control.Height;
        }

        // Failed to find control
        nextScrollPosition = null;

        return false;
    }
}
