using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls;
using System.Numerics;
using Content.Client.Stylesheets;
using System.Collections.Generic;

namespace Content.Client.ADT.Minesweeper;

[GenerateTypedNameReferences]
public sealed partial class MinesweeperWindow : FancyWindow
{
    private int GridSize = 10;
    private int MineCount = 15;

    private Button[,] _buttons = new Button[1,1];
    private bool[,] _mines = new bool[1,1];
    private bool[,] _revealed = new bool[1,1];
    private bool[,] _flags = new bool[1,1];
    private readonly Random _rand = new();

    private GridContainer _mineGrid = default!;

    private bool _minesPlaced = false;
    private bool _flagMode = false;

    // –°–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    private readonly List<(string name, int size, int mines)> _difficulties = new()
    {
        ("–õ–µ–≥–∫–æ", 8, 10),
        ("–°—Ä–µ–¥–Ω–µ", 10, 15),
        ("–°–ª–æ–∂–Ω–æ", 15, 35)
    };

    public MinesweeperWindow()
    {
        RobustXamlLoader.Load(this);

        ToggleFlagButton.OnPressed += _ => ToggleFlagMode();
        NewGameButton.OnPressed += _ => NewGame();

        InitializeDifficultyOptions();

        NewGame();
    }

    private void InitializeDifficultyOptions()
    {
        DifficultySelect.Clear();

        for (int i = 0; i < _difficulties.Count; i++)
        {
            DifficultySelect.AddItem(_difficulties[i].name, i); // id - –∏–Ω–¥–µ–∫—Å
        }

        DifficultySelect.OnItemSelected += args =>
        {
            int index = (int)args.Id;
            var selected = _difficulties[index];
            GridSize = selected.size;
            MineCount = selected.mines;
            DifficultySelect.SelectId(index);
            NewGame();
        };

        DifficultySelect.SelectId(1); // –í—ã–±–∏—Ä–∞–µ–º "–°—Ä–µ–¥–Ω–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–Ω–¥–µ–∫—Å 1)
    }

    private void NewGame()
    {
        _minesPlaced = false;
        _flagMode = false;
        ToggleFlagButton.Text = "–†–µ–∂–∏–º: –û—Ç–∫—Ä—ã—Ç—å";

        _buttons = new Button[GridSize, GridSize];
        _mines = new bool[GridSize, GridSize];
        _revealed = new bool[GridSize, GridSize];
        _flags = new bool[GridSize, GridSize];

        MineContainer.RemoveAllChildren();

        _mineGrid = new GridContainer
        {
            Columns = GridSize,
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        MineContainer.AddChild(_mineGrid);

        GenerateGrid();
    }

    private void GenerateGrid()
    {
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                var button = new Button
                {
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                    StyleClasses = { StyleBase.ButtonSquare },
                    Text = "",
                    Disabled = false,
                    Modulate = Color.White
                };

                int localX = x, localY = y;
                button.OnPressed += _ => OnTileClicked(localX, localY);

                _buttons[x, y] = button;
                _mineGrid.AddChild(button);
            }
        }
    }

    private void PlaceMinesExceptFirstClick(int safeX, int safeY)
    {
        int placed = 0;
        while (placed < MineCount)
        {
            int x = _rand.Next(GridSize);
            int y = _rand.Next(GridSize);

            if (x >= safeX - 1 && x <= safeX + 1 &&
                y >= safeY - 1 && y <= safeY + 1)
                continue;

            if (_mines[x, y])
                continue;

            _mines[x, y] = true;
            placed++;
        }
    }

    private void OnTileClicked(int x, int y)
    {
        if (!_minesPlaced)
        {
            PlaceMinesExceptFirstClick(x, y);
            _minesPlaced = true;
        }

        if (_flagMode)
        {
            if (!_revealed[x, y])
            {
                _flags[x, y] = !_flags[x, y];
                _buttons[x, y].Text = _flags[x, y] ? "üè≥" : "";
            }
            return;
        }

        if (_revealed[x, y] || _flags[x, y])
            return;

        _revealed[x, y] = true;

        if (_mines[x, y])
        {
            _buttons[x, y].Text = "üí£";
            _buttons[x, y].Modulate = Color.Red;
            RevealAllMines();
            return;
        }

        int count = CountAdjacentMines(x, y);
        _buttons[x, y].Text = count > 0 ? count.ToString() : "";
        _buttons[x, y].Disabled = true;
        _buttons[x, y].Modulate = Color.White;

        if (count == 0)
        {
            RevealEmptyTiles(x, y);
        }
    }

    private void RevealEmptyTiles(int x, int y)
    {
        for (int dx = -1; dx <= 1; dx++)
        for (int dy = -1; dy <= 1; dy++)
        {
            int nx = x + dx;
            int ny = y + dy;
            if (nx >= 0 && ny >= 0 && nx < GridSize && ny < GridSize && !_revealed[nx, ny])
            {
                OnTileClicked(nx, ny);
            }
        }
    }

    private void RevealAllMines()
    {
        for (int y = 0; y < GridSize; y++)
        for (int x = 0; x < GridSize; x++)
        {
            if (_mines[x, y])
            {
                _buttons[x, y].Text = "üí£";
                _buttons[x, y].Modulate = Color.DarkRed;
            }
        }
    }

    private int CountAdjacentMines(int x, int y)
    {
        int count = 0;
        for (int dx = -1; dx <= 1; dx++)
        for (int dy = -1; dy <= 1; dy++)
        {
            int nx = x + dx;
            int ny = y + dy;
            if (nx >= 0 && ny >= 0 && nx < GridSize && ny < GridSize && _mines[nx, ny])
                count++;
        }
        return count;
    }

    private void ToggleFlagMode()
    {
        _flagMode = !_flagMode;
        ToggleFlagButton.Text = _flagMode ? "–†–µ–∂–∏–º: –§–ª–∞–∂–æ–∫" : "–†–µ–∂–∏–º: –û—Ç–∫—Ä—ã—Ç—å";
    }
}
