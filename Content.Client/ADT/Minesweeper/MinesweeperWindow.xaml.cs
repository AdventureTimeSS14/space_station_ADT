using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.ADT.Minesweeper;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.ADT.Minesweeper;

[GenerateTypedNameReferences]
public sealed partial class MinesweeperWindow : FancyWindow
{
    private int GridSize = 10;
    private int MineCount = 15;

    private Button[,] _buttons = new Button[1, 1];
    private bool[,] _mines = new bool[1, 1];
    private bool[,] _revealed = new bool[1, 1];
    private bool[,] _flags = new bool[1, 1];
    private readonly Random _rand = new();

    private GridContainer _mineGrid = default!;

    private bool _minesPlaced = false;
    private bool _flagMode = false;


    private EntityUid _uid = default!;
    private MinesweeperComponent _comp = default!;
    private BoundUserInterface _boundUserInterface = default!;



    // private float _elapsedTime = 0f;
    private bool _gameEnd = false;
    private Stopwatch _stopwatch = new();
    // private List<MinesweeperRecord> _records = new();

    // –°–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    private readonly List<(string name, int size, int mines, Color themeColor, Color modulateColor)> _difficulties = new()
    {
        ("Debug", 4, 1, Color.FromHex("#FF00FF"), Color.FromHex("#b563b5ff")),     // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –¥–µ–±–∞–≥–∞
        ("–õ–µ–≥–∫–æ", 8, 10, Color.FromHex("#32cd32"), Color.FromHex("#69b369ff")),   // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ª–µ–≥–∫–æ–≥–æ
        ("–°—Ä–µ–¥–Ω–µ", 10, 15, Color.FromHex("#e28b00"), Color.FromHex("#c3ab64ff")), // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
        ("–°–ª–æ–∂–Ω–æ", 15, 35, Color.FromHex("#cc0000"), Color.FromHex("#cb6161ff"))  // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ
    };

    private void ApplyDifficultyTheme(Color color)
    {
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫
        // NewGameButton.ModulateSelfOverride = color;

        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        DifficultySelect.ModulateSelfOverride = color;

        // DifficultySelect.ModulateSelfOverride = color.Darken(0.2f);
    }

    public MinesweeperWindow()
    {
        RobustXamlLoader.Load(this);

        ToggleFlagButton.OnPressed += _ => ToggleFlagMode();
        NewGameButton.OnPressed += _ => NewGame();

        NewGameButton.ModulateSelfOverride = Color.FromHex("#008000");
        ToggleFlagButton.ModulateSelfOverride = Color.FromHex("#004EFF");

        InitializeDifficultyOptions();

        NewGame();
    }

    protected override void Opened()
    {
        base.Opened();
    }


    private void InitializeDifficultyOptions()
    {
        DifficultySelect.Clear();

        for (int i = 0; i < _difficulties.Count; i++)
        {
            DifficultySelect.AddItem(_difficulties[i].name, i);
        }

        DifficultySelect.OnItemSelected += args =>
        {
            int index = (int)args.Id;
            var selected = _difficulties[index];
            GridSize = selected.size;
            MineCount = selected.mines;

            ApplyDifficultyTheme(selected.themeColor);
            MineContentsContainer.Modulate = selected.modulateColor;

            DifficultySelect.SelectId(index);
            NewGame();
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –µ—ë —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        DifficultySelect.SelectId(2);
        ApplyDifficultyTheme(_difficulties[2].themeColor);
        MineContentsContainer.Modulate = _difficulties[2].modulateColor;
    }

    private void NewGame()
    {
        _gameEnd = false;
        // _elapsedTime = 0f;
        _stopwatch.Restart();
        GameStatusLabel.Text = "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å...";
        GameStatusLabel.FontColorOverride = Color.Green;


        _minesPlaced = false;
        _flagMode = false;
        ToggleFlagButton.Text = "–†–µ–∂–∏–º: –û—Ç–∫—Ä—ã—Ç—å";

        _buttons = new Button[GridSize, GridSize];
        _mines = new bool[GridSize, GridSize];
        _revealed = new bool[GridSize, GridSize];
        _flags = new bool[GridSize, GridSize];

        MineContainer.RemoveAllChildren();

        _mineGrid = new GridContainer
        {
            Columns = GridSize,
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        MineContainer.AddChild(_mineGrid);

        GenerateGrid();
        UpdateMinesCounter();
    }

    private void GenerateGrid()
    {
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                var button = new Button
                {
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                    StyleClasses = { StyleBase.ButtonSquare },
                    Text = "",
                    Disabled = false,
                    Modulate = Color.White
                };

                int localX = x, localY = y;
                button.OnPressed += _ => OnTileClicked(localX, localY);

                _buttons[x, y] = button;
                _mineGrid.AddChild(button);
            }
        }
    }

    private void PlaceMinesExceptFirstClick(int safeX, int safeY)
    {
        int placed = 0;
        while (placed < MineCount)
        {
            int x = _rand.Next(GridSize);
            int y = _rand.Next(GridSize);

            if (x >= safeX - 1 && x <= safeX + 1 &&
                y >= safeY - 1 && y <= safeY + 1)
                continue;

            if (_mines[x, y])
                continue;

            _mines[x, y] = true;
            placed++;
        }
    }

    // TODO: –î–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // public void UpdateName(string? userName)
    // {
    //     _comp.LastOpenedBy = userName;
    // }

    public void OnTileClicked(int x, int y)
    {
        if (_gameEnd) return;

        if (!_minesPlaced)
        {
            PlaceMinesExceptFirstClick(x, y);
            _minesPlaced = true;
        }

        if (_flagMode)
        {
            if (!_revealed[x, y])
            {
                _flags[x, y] = !_flags[x, y];
                _buttons[x, y].Text = _flags[x, y] ? "üè≥" : "";
                UpdateMinesCounter();
            }
            return;
        }

        if (_revealed[x, y] || _flags[x, y])
            return;

        _revealed[x, y] = true;

        if (_mines[x, y])
        {
            _buttons[x, y].Text = "üí£";
            _buttons[x, y].Modulate = Color.Red;
            RevealAllMines();
            GameStatusLabel.Text = "üí£ –í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å –Ω–∞ –º–∏–Ω–µ!";
            GameStatusLabel.FontColorOverride = Color.Red;
            _gameEnd = true;
            return;
        }

        int count = CountAdjacentMines(x, y);
        _buttons[x, y].Text = count > 0 ? count.ToString() : "";
        _buttons[x, y].Disabled = true;
        _buttons[x, y].Modulate = Color.White;

        if (count == 0)
        {
            RevealEmptyTiles(x, y);
        }

        CheckWinCondition();
    }

    private void RevealEmptyTiles(int x, int y)
    {
        for (int dx = -1; dx <= 1; dx++)
            for (int dy = -1; dy <= 1; dy++)
            {
                int nx = x + dx;
                int ny = y + dy;
                if (nx >= 0 && ny >= 0 && nx < GridSize && ny < GridSize && !_revealed[nx, ny])
                {
                    OnTileClicked(nx, ny);
                }
            }
    }

    private void RevealAllMines()
    {
        for (int y = 0; y < GridSize; y++)
            for (int x = 0; x < GridSize; x++)
            {
                if (_mines[x, y])
                {
                    _buttons[x, y].Text = "üí£";
                    _buttons[x, y].Modulate = Color.DarkRed;
                }
            }
    }

    private int CountAdjacentMines(int x, int y)
    {
        int count = 0;
        for (int dx = -1; dx <= 1; dx++)
            for (int dy = -1; dy <= 1; dy++)
            {
                int nx = x + dx;
                int ny = y + dy;
                if (nx >= 0 && ny >= 0 && nx < GridSize && ny < GridSize && _mines[nx, ny])
                    count++;
            }
        return count;
    }

    private void ToggleFlagMode()
    {
        _flagMode = !_flagMode;
        ToggleFlagButton.Text = _flagMode ? "–†–µ–∂–∏–º: –§–ª–∞–∂–æ–∫ üè≥" : "–†–µ–∂–∏–º: –û—Ç–∫—Ä—ã—Ç—å";
        ToggleFlagButton.ModulateSelfOverride = _flagMode ? Color.FromHex("#b07d2b") : Color.FromHex("#004EFF");
    }

    private void UpdateMinesCounter()
    {
        int flagsPlaced = 0;
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                if (_flags[x, y])
                    flagsPlaced++;
            }
        }

        MinesCountLabel.Text = $"{flagsPlaced}/{MineCount}";
    }

    private void CheckWinCondition()
    {
        for (int y = 0; y < GridSize; y++)
            for (int x = 0; x < GridSize; x++)
            {
                if (!_mines[x, y] && !_revealed[x, y])
                    return;
            }
        // TODO: –î–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // if (_comp != null)
        //     _comp.Dirty();

        // –ü–æ–±–µ–¥–∞
        _gameEnd = true;
        RevealAllMines();
        GameStatusLabel.Text = "‚úì –ü–æ–±–µ–¥–∞! \n–í—Å–µ –º–∏–Ω—ã —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã.";




        // TODO: –î–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // var nameUser = _comp?.LastOpenedBy ?? "Unknow";
        // var record = new MinesweeperRecord
        // {
        //     Difficulty = _difficulties[DifficultySelect.SelectedId].name,
        //     TimeSeconds = (float)_stopwatch.Elapsed.TotalSeconds,
        //     EntityName = nameUser
        // };
        // // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        // _records.Add(record);
        // _boundUserInterface.SendMessage(new MinesweeperWinMessage(_difficulties[DifficultySelect.SelectedId].name, (float)_stopwatch.Elapsed.TotalSeconds));
        // if (_comp != null)
        //     _comp.Dirty();
        // UpdateRecordsDisplay();
    }

    public void LoadRecords(EntityUid uid, MinesweeperComponent component, BoundUserInterface boundUserInterface)
    {
        _uid = uid;
        _comp = component;
        _boundUserInterface = boundUserInterface;
    }

    // TODO: –î–æ–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // private void UpdateRecordsDisplay()
    // {
    //     _recordListLabel.Text = string.Join("\n", _records.Select(r => r.ToString()));
    // }
}
