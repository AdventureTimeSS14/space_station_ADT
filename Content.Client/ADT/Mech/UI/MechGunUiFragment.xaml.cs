using Content.Shared.ADT.Mech;
using Content.Shared.ADT.Weapons.Ranged.Components;
using Content.Shared.Mech;
using Content.Shared.Timing;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.ADT.Mech.UI;

[GenerateTypedNameReferences]
public sealed partial class MechGunUiFragment : BoxContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<EntityUid?>? ReloadAction;
    public EntityUid? FragmentOwner;
    private StartEndTime _reloadTimer;
    private StyleBoxFlat _barStyle;
    public float ReloadTime = 10f;

    public MechGunUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _barStyle = new StyleBoxFlat(Color.LimeGreen);
        ReloadBar.ForegroundStyleBoxOverride = _barStyle;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var curTime = _timing.CurTime;

        var progress = _reloadTimer.ProgressAt(curTime);
        ReloadBar.Value = float.IsFinite(progress) ? progress : 1;

        ReloadButton.OnPressed += _ => StartReloading(FragmentOwner);

        if (progress >= 1 && ReloadButton.Disabled)
        {
            ReloadButton.Disabled = false;
            _barStyle = new StyleBoxFlat(Color.LimeGreen);
        }
    }
    private void StartReloading(EntityUid? uid)
    {
        ReloadAction?.Invoke(uid);
        StartTimer(ReloadTime);
    }
    public void UpdateContents(MechGunUiState state)
    {
        ReloadTime = state.ReloadTime;

        if (state.Shots >= state.Capacity * 0.7)
            _barStyle = new StyleBoxFlat(Color.LimeGreen);
        else if (state.Shots >= state.Capacity * 0.4)
            _barStyle = new StyleBoxFlat(Color.PaleGoldenrod);
        else
            _barStyle = new StyleBoxFlat(Color.OrangeRed);

    }

    public void StartTimer(float time)
    {
        var curTime = _timing.CurTime;
        _reloadTimer.Start = curTime;
        _reloadTimer.End = curTime + TimeSpan.FromSeconds(time);
        _barStyle = new StyleBoxFlat(Color.Yellow);
        ReloadButton.Disabled = true;
    }
}
