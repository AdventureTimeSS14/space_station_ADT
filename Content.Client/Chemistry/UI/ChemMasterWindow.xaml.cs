using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;
using System.Numerics;
using System.Threading.Tasks;
using Content.Shared.FixedPoint;
using Robust.Client.Graphics;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Chemistry.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedChemMasterComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class ChemMasterWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        //ADT-Tweak Start
        public event Action<BaseButton.ButtonEventArgs, ReagentButton, int, bool>? OnReagentButtonPressed;
        public event Action<int>? OnAmountButtonPressed;
        public event Action<int>? OnSortMethodChanged;
        public event Action<int>? OnTransferAmountChanged;
        public event Action<List<int>>? OnUpdateAmounts;
        public event Action<ReagentId, bool, bool>? OnTransferAllPressed;
        public event Action<ReagentId>? OnChooseReagentPressed;
        public event Action<int>? OnBottleSlotSelected;
        public event Action<int>? OnToggleBottleFillPressed;
        public event Action<int>? OnBottleSlotEjectPressed;
        public event Action<int>? OnRowEjectPressed;
        public bool IsOutputTab => OutputTabs.CurrentTab == 1; // True for bottles tab, false for pills tab
        private bool _deleteMode = false;
        public readonly Button[] BottleStorageButtons;
        public readonly Button[] BottleEjectButtons;
        public readonly Button[] RowEjectButtons;
        //ADT-Tweak End
        public readonly Button[] PillTypeButtons;

        //ADT-Tweak Start
        private List<int> _amounts = new();

        private const string TransferringAmountColor = "#ffffff";
        const int MaxAmountButtons = 24;
        private ReagentSortMethod _currentSortMethod = ReagentSortMethod.Alphabetical;
        private ChemMasterBoundUserInterfaceState? _lastState;
        private int _transferAmount = 50;
        private Label? _selectedReagentLabel = null;
        // ADT-Tweak

        private const string PillsRsiPath = "/Textures/Objects/Specific/Chemistry/pills.rsi";

        /// <summary>
        /// Create and initialize the chem master UI client-side. Creates the basic layout,
        /// actual data isn't filled in until the server sends data about the chem master.
        /// </summary>
        public ChemMasterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            //ADT-Tweak Start
            AmountLabel.HorizontalAlignment = HAlignment.Center;
            AmountLineEdit.OnTextEntered += SetAmount;

            DeleteAsFrequentButton.OnPressed += HandleDeleteModeToggled;
            SaveAsFrequentButton.OnPressed += HandleSaveAsFrequentPressed;
            //ADT-Tweak End
            // Pill type selection buttons, in total there are 20 pills.
            // Pill rsi file should have states named as pill1, pill2, and so on.
            var resourcePath = new ResPath(PillsRsiPath);
            var pillTypeGroup = new ButtonGroup();
            PillTypeButtons = new Button[20];
            for (uint i = 0; i < PillTypeButtons.Length; i++)
            {
                // For every button decide which stylebase to have
                // Every row has 10 buttons
                String styleBase = StyleBase.ButtonOpenBoth;
                uint modulo = i % 10;
                if (i > 0 && modulo == 0)
                    styleBase = StyleBase.ButtonOpenRight;
                else if (i > 0 && modulo == 9)
                    styleBase = StyleBase.ButtonOpenLeft;
                else if (i == 0)
                    styleBase = StyleBase.ButtonOpenRight;

                // Generate buttons
                PillTypeButtons[i] = new Button
                {
                    Access = AccessLevel.Public,
                    StyleClasses = { styleBase },
                    MaxSize = new Vector2(42, 28),
                    Group = pillTypeGroup
                };

                // Generate buttons textures
                var specifier = new SpriteSpecifier.Rsi(resourcePath, "pill" + (i + 1));
                TextureRect pillTypeTexture = new TextureRect
                {
                    Texture = specifier.Frame0(),               //ADT-Tweak
                    TextureScale = new Vector2(1.75f, 1.75f),
                    Stretch = TextureRect.StretchMode.KeepCentered,
                };

                PillTypeButtons[i].AddChild(pillTypeTexture);
                Grid.AddChild(PillTypeButtons[i]);
            }

            PillDosage.InitDefaultButtons();
            PillNumber.InitDefaultButtons();
            BottleDosage.InitDefaultButtons();
            BottleNumber.InitDefaultButtons();      //ADT-Tweak

            // ADT-Tweak Start - Bottle storage buttons with per-slot eject (eject on the right)
            BottleStorageButtons = new Button[20];
            BottleEjectButtons = new Button[20];
            RowEjectButtons = new Button[5];
            for (int row = 0; row < 5; row++)
            {
                for (int col = 0; col < 4; col++)
                {
                    int i = row * 4 + col;
                    var cell = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalExpand = true
                    };

                    // Match Reagent Dispenser card sizing:
                    // - MainButton fills available space (HorizontalExpand/VerticalExpand).
                    // - Eject button fixed width 20px, full height, OpenLeft style, with centered label glyph.
                    var mainButton = new Button
                    {
                        HorizontalExpand = true,
                        VerticalExpand = true,
                        StyleClasses = { StyleBase.ButtonSquare },
                        ToggleMode = true
                    };

                    var ejectButton = new Button
                    {
                        VerticalExpand = true,
                        StyleClasses = { StyleBase.ButtonOpenLeft }
                    };
                    ejectButton.MinSize = new Vector2(20, 0);
                    ejectButton.MaxSize = new Vector2(20, float.MaxValue);

                    var ejectLabel = new Label
                    {
                        Text = Loc.GetString("chem-master-window-eject-container-button"),
                        VerticalAlignment = VAlignment.Center,
                        HorizontalAlignment = HAlignment.Center,
                        Margin = new Thickness(-7, -4, 0, 0)
                    };
                    ejectButton.AddChild(ejectLabel);

                    var buttonIndex = i;
                    mainButton.OnPressed += _ => OnToggleBottleFillPressed?.Invoke(buttonIndex);
                    ejectButton.OnPressed += _ => OnBottleSlotEjectPressed?.Invoke(buttonIndex);

                    BottleStorageButtons[i] = mainButton;
                    BottleEjectButtons[i] = ejectButton;

                    cell.AddChild(mainButton);
                    cell.AddChild(ejectButton);
                    BottleStorageGrid.AddChild(cell);
                }

                // Add row eject button
                var rowEjectButton = new Button
                {
                    Text = Loc.GetString("chem-master-window-eject-row-button"),
                    StyleClasses = { StyleBase.ButtonCaution },
                    VerticalExpand = true
                };
                int rowIndex = row;
                rowEjectButton.OnPressed += _ => OnRowEjectPressed?.Invoke(rowIndex);
                RowEjectButtons[row] = rowEjectButton;
                BottleStorageGrid.AddChild(rowEjectButton);
            }
            // ADT-Tweak End

            // Ensure label length is within the character limit.
            LabelLineEdit.IsValid = s => s.Length <= SharedChemMaster.LabelMaxLength;

            Tabs.SetTabTitle(0, Loc.GetString("chem-master-window-buffer-text"));

            // Set titles for the new output tabs
            OutputTabs.SetTabTitle(0, Loc.GetString("chem-master-window-pills-tab"));
            OutputTabs.SetTabTitle(1, Loc.GetString("chem-master-window-bottles-tab"));
            //ADT-Tweak Start

            SortMethod.AddItem(
                Loc.GetString("chem-master-window-sort-method-Amount-text"),
                (int)ReagentSortMethod.Amount);

            SortMethod.AddItem(
                Loc.GetString("chem-master-window-sort-method-Alphabetical-text"),
                (int)ReagentSortMethod.Alphabetical);

            SortMethod.AddItem(
                Loc.GetString("chem-master-window-sort-method-Time-text"),
                (int)ReagentSortMethod.Time);

            SortMethod.OnItemSelected += HandleChildPressed;


            BufferTransferButton.OnPressed += HandleDiscardTransferPress;
            BufferDiscardButton.OnPressed += HandleDiscardTransferPress;


            CreateAmountButtons();
            //ADT-Tweak End
        }

        //ADT-Tweak Start
        private void CreateAmountButtons()
        {
            AmountButtons.DisposeAllChildren();

            int buttonsToShow = Math.Min(_amounts.Count, MaxAmountButtons);

            for (int i = 0; i < buttonsToShow; i++)
            {
                var styleClass = StyleBase.ButtonOpenBoth;
                var amount = _amounts[i];
                var columns = AmountButtons.Columns;

                if (i == 0 || i % columns == 0)
                    styleClass = StyleBase.ButtonOpenRight;

                if ((i + 1) % columns == 0)
                    styleClass = StyleBase.ButtonOpenLeft;

                var button = new Button()
                {
                    Text = amount.ToString(),
                    MinSize = new(10, 10),
                    StyleClasses = { styleClass },
                    HorizontalExpand = true
                };

                button.OnPressed += _ => HandleAmountButtonPressed(amount);
                AmountButtons.AddChild(button);
            }
        }

        private void HandleSaveAsFrequentPressed(BaseButton.ButtonEventArgs args)
        {
            if (!int.TryParse(AmountLineEdit.Text, out var amount))
            {
                ShowWarningMessage(Loc.GetString("chem-master-window-amount-too-much"));
                return;
            }

            if (amount > 1000)  // Limit maximum amount to 1000
            {
                ShowWarningMessage(Loc.GetString("chem-master-window-amount-too-much"));
                return;
            }

            if (_amounts.Any(a => amount == a))
            {
                ShowWarningMessage(Loc.GetString("chem-master-window-amount-too-much"));
                return;
            }

            if (_amounts.Count >= MaxAmountButtons)  // Limit maximum number of templates to 28
            {
                ShowWarningMessage(Loc.GetString("chem-master-window-amount-limit-reached"));
                return;
            }

            _amounts.Add(amount);
            _amounts.Sort();
            CreateAmountButtons();
            OnUpdateAmounts?.Invoke(_amounts);
            AmountLineEdit.SetText(string.Empty);
        }

        private async void ShowWarningMessage(string message)
        {
            WarningLabel.Text = message;
            WarningLabel.Visible = true;

            // Clear the warning message after 3 seconds
            await Task.Delay(3000);
            WarningLabel.Text = string.Empty;
            WarningLabel.Visible = false;
        }

        private void HandleReagentSelection(ReagentId reagentId, Button button)
        {
            var isCurrentlySelected = _lastState?.SelectedReagent?.Prototype == reagentId.Prototype;

            if (isCurrentlySelected)
            {
                OnChooseReagentPressed?.Invoke(default(ReagentId));
            }
            else
            {
                OnChooseReagentPressed?.Invoke(reagentId);
            }
        }

        private void UpdateReagentSelectionUI()
        {
            if (!string.IsNullOrEmpty(_lastState?.SelectedReagent?.Prototype))
            {
                var selectedReagentQuantity = _lastState.BufferReagents
                    .FirstOrDefault(r => r.Reagent == _lastState.SelectedReagent)
                    .Quantity.Int();

                if (selectedReagentQuantity > 0)
                {
                    PillDosage.Value = Math.Min(PillDosage.Value, selectedReagentQuantity);
                    PillNumber.Value = selectedReagentQuantity / Math.Max(PillDosage.Value, 1);

                    var bufferVolume = _lastState.BufferCurrentVolume?.Int() ?? 0;
                    BottleDosage.Value = Math.Min(BottleDosage.Value, selectedReagentQuantity);
                    var storedBottlesCount = _lastState.StoredBottles.Count(b => b != null);
                    BottleNumber.Value = Math.Min(
                        selectedReagentQuantity / Math.Max(BottleDosage.Value, 1),
                        storedBottlesCount
                    );
                }
            }
        }

        private void HandleDeleteModeToggled(BaseButton.ButtonEventArgs args)
        {
            _deleteMode = DeleteAsFrequentButton.Pressed;
        }

        private void HandleAmountButtonPressed(int amount)
        {
            if (_deleteMode)
            {
                _amounts.Remove(amount);
                CreateAmountButtons();
                OnUpdateAmounts?.Invoke(_amounts);
            }
            else
            {
                OnAmountButtonPressed?.Invoke(amount);
                SetAmountText(amount.ToString());
            }
        }

        private void HandleDiscardTransferPress(BaseButton.ButtonEventArgs args)
        {
            var bufferButtons = BufferInfo.Children
                .Where(c => c is Button)
                .Cast<Button>();

            foreach (var button in bufferButtons)
            {
                var text = BufferTransferButton.Pressed ? "transfer" : "discard";
                button.Text = Loc.GetString($"chem-master-window-{text}-button-text");
            }
        }

        private void HandleSortMethodChange(int newSortMethod)
        {
            if (newSortMethod == (int)_currentSortMethod)
                return;

            _currentSortMethod = (ReagentSortMethod)newSortMethod;
            SortMethod.SelectId(newSortMethod);

            SortUpdated();
        }

        private void HandleChildPressed(OptionButton.ItemSelectedEventArgs args)
        {
            HandleSortMethodChange(args.Id);
            OnSortMethodChanged?.Invoke(args.Id);
        }

        private void SortUpdated()
        {
            if (_lastState == null)
                return;

            UpdateState(_lastState);
        }

        private bool ValidateAmount(string newText, bool invokeEvent = true)
        {
            if (string.IsNullOrWhiteSpace(newText) || !int.TryParse(newText, out int amount) || amount <= 0)
            {
                AmountLineEdit.SetText(string.Empty);
                return false;
            }

            _transferAmount = amount;

            if (invokeEvent)
                OnTransferAmountChanged?.Invoke(amount);

            return true;
        }

        private void SetAmount(LineEdit.LineEditEventArgs args) =>
            SetAmountText(args.Text);

        private void SetAmountText(string newText, bool invokeEvent = true)
        {
            if (newText == _transferAmount.ToString() || !ValidateAmount(newText, invokeEvent))
                return;

            var localizedAmount = Loc.GetString(
                "chem-master-window-transferring-label",
                ("quantity", newText),
                ("color", TransferringAmountColor));

            AmountLabel.Text = localizedAmount;
            AmountLineEdit.SetText(string.Empty);
        }
        //ADT-Tweak End

        private ReagentButton MakeReagentButton(string text, ReagentId id, bool isBuffer)
        {
            var reagentTransferButton = new ReagentButton(text, id, isBuffer);
            reagentTransferButton.OnPressed += args
                => OnReagentButtonPressed?.Invoke(args, reagentTransferButton, _transferAmount, OutputTabs.CurrentTab == 1);  //ADT-Tweak
            return reagentTransferButton;
        }
        /// <summary>
        /// Conditionally generates a set of reagent buttons based on the supplied boolean argument.
        /// This was moved outside of BuildReagentRow to facilitate conditional logic, stops indentation depth getting out of hand as well.
        /// </summary>
        private ReagentButton? CreateReagentTransferButton(ReagentId reagent, bool isBuffer, bool addReagentButtons)
        {
            if (!addReagentButtons)
                return null; // Return an empty list if reagentTransferButton creation is disabled.

            // ADT-Tweak-Start: Use the appropriate toggle (buffer vs. pill) when determining the text
            var isTransfer = BufferTransferButton.Pressed;
            var text = isTransfer
                ? "transfer"
                : "discard";

            var reagentTransferButton = MakeReagentButton(
                Loc.GetString($"chem-master-window-{text}-button"),
                reagent,
                isBuffer
            );

            return reagentTransferButton;
            // ADT-Tweak-End
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (ChemMasterBoundUserInterfaceState)state;


            _lastState = castState; // ADT-Tweak
            // Сначала применяем метод сортировки, затем строим панели
            HandleSortMethodChange(castState.SortMethod);   // ADT-Tweak
            UpdatePanelInfo(castState);
            if (castState.UpdateLabel)
                LabelLine = GenerateLabel(castState);
            SetAmountText(castState.TransferringAmount.ToString(), false);  // ADT-Tweak

            // ADT-Tweak-Start: compare list contents instead of references
            if (!_amounts.SequenceEqual(castState.Amounts))
            {
                _amounts = castState.Amounts;
                _amounts.Sort();
                CreateAmountButtons();
            }
            // ADT-Tweak-End



            InputEjectButton.Disabled = castState.ContainerInfo is null;
            CreateBottleButton.Disabled = castState.BufferReagents.Count == 0; ;
            CreatePillButton.Disabled = castState.BufferReagents.Count == 0;

            UpdateDosageFields(castState);
            UpdateBottleStorage(castState); //ADT-Tweak
        }

        //ADT-Tweak Start
        private void UpdateBottleStorage(ChemMasterBoundUserInterfaceState state)
        {
            for (int i = 0; i < BottleStorageButtons.Length; i++)
            {
                var button = BottleStorageButtons[i];
                var info = state.StoredBottles[i];
                if (info != null)
                {
                    button.Text = $"{info.CurrentVolume}/{info.MaxVolume}";
                    if (info.Reagents != null && info.Reagents.Any())
                    {
                        var reagent = info.Reagents.First();
                        _prototypeManager.TryIndex(reagent.Reagent.Prototype, out ReagentPrototype? proto);
                        button.Modulate = proto?.SubstanceColor ?? Color.White;
                    }
                    else
                    {
                        button.Modulate = Color.White;
                    }
                    // Enable toggle mode when bottle is present
                    button.ToggleMode = true;

                    button.Pressed = state.SelectedBottleSlot == i || state.SelectedBottleForFill == i;
                }
                else
                {
                    button.Text = Loc.GetString("chem-master-window-bottle-storage-empty");
                    button.Modulate = Color.Gray;
                    button.Pressed = false;
                    // Disable toggle mode when slot is empty
                    button.ToggleMode = false;
                }

                // Enable eject only if a bottle exists in the slot.
                if (BottleEjectButtons != null && BottleEjectButtons.Length > i && BottleEjectButtons[i] != null)
                    BottleEjectButtons[i].Disabled = info == null;
            }
        }
        //ADT-Tweak End

        private FixedPoint2 CurrentStateBufferVolume(ChemMasterBoundUserInterfaceState state) =>
            state.BufferCurrentVolume ?? 0;

        private void UpdateDosageFields(ChemMasterBoundUserInterfaceState castState)
        {
            // ADT-Tweak Start
            var bufferVolume = castState.BufferCurrentVolume?.Int() ?? 0;
            PillDosage.Value = (int)Math.Min(bufferVolume, castState.PillDosageLimit);
            BottleDosage.Value = (int)Math.Min(bufferVolume, castState.BottleDosageLimit);

            var storedBottlesCount = castState.StoredBottles.Count(b => b != null);         //ADT-Tweak

            PillTypeButtons[castState.SelectedPillType].Pressed = true;
            PillNumber.IsValid = x => x >= 0;
            PillDosage.IsValid = x => x > 0 && x <= castState.PillDosageLimit;
            BottleNumber.IsValid = x => x >= 0 && x <= storedBottlesCount;   //ADT-Tweak
            BottleDosage.IsValid = x => x > 0 && x <= castState.BottleDosageLimit;

            // Avoid division by zero
            if (PillDosage.Value > 0)
                PillNumber.Value = bufferVolume / PillDosage.Value;
            else
                PillNumber.Value = 0;

            if (BottleDosage.Value > 0)
                BottleNumber.Value = Math.Min(bufferVolume / BottleDosage.Value, storedBottlesCount);   //ADT-Tweak
            else
                BottleNumber.Value = 0;
            // ADT-Tweak End
        }
        /// <summary>
        /// Generate a product label based on reagents in the buffer.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        private string GenerateLabel(ChemMasterBoundUserInterfaceState state)
        {
            if (CurrentStateBufferVolume(state) == 0)   // ADT-Tweak
                return "";

            var buffer = state.BufferReagents;    // ADT-Tweak
            var reagent = buffer.OrderByDescending(r => r.Quantity).First().Reagent;  // ADT-Tweak
            _prototypeManager.TryIndex(reagent.Prototype, out ReagentPrototype? proto);
            return proto?.LocalizedName ?? "";
        }

        /// <summary>
        /// Update the container, buffer, and packaging panels.
        /// </summary>
        /// <param name="state">State data for the dispenser.</param>
        private void UpdatePanelInfo(ChemMasterBoundUserInterfaceState state)
        {
            BufferTransferButton.Pressed = state.Mode == ChemMasterMode.Transfer;
            BufferDiscardButton.Pressed = state.Mode == ChemMasterMode.Discard;
            // ADT-Tweak-Start

            BuildContainerUI(ContainerInfoContainer, state.ContainerInfo, true);
            BuildBufferInfo(state);
            // ADT-Tweak-End
        }

        private void BuildBufferInfo(ChemMasterBoundUserInterfaceState state)
        {
            BufferInfo.Children.Clear();

            if (!state.BufferReagents.Any())
            {
                BufferInfo.Children.Add(new Label { Text = Loc.GetString("chem-master-window-buffer-empty-text") });
                return;
            }

            var bufferHBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal
            };

            BufferInfo.AddChild(bufferHBox);

            var bufferLabel = new Label { Text = $"{Loc.GetString("chem-master-window-buffer-label")} " };
            bufferHBox.AddChild(bufferLabel);
            var bufferVol = new Label
            {
                Text = $"{state.BufferCurrentVolume}u",
                StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
            };
            bufferHBox.AddChild(bufferVol);

            // ADT-Tweak Start
            var bufferReagents = state.BufferReagents;
            if (_currentSortMethod == ReagentSortMethod.Amount)
                bufferReagents = bufferReagents.OrderByDescending(x => x.Quantity).ToList();
            else if (_currentSortMethod == ReagentSortMethod.Alphabetical)
                bufferReagents = bufferReagents.OrderBy(x =>
                {
                    _prototypeManager.TryIndex(x.Reagent.Prototype, out ReagentPrototype? proto);
                    var localized = proto?.LocalizedName ?? string.Empty;
                    return localized;
                }).ToList();
            else
                bufferReagents = bufferReagents.OrderBy(x => x.Reagent.Prototype).ToList();

            HandleBuffer(_currentSortMethod == ReagentSortMethod.Time ? state.BufferReagents : bufferReagents);
        }


        private void HandleBuffer(IEnumerable<ReagentQuantity> reagents)
        {
            var rowCount = 0;

            // ADT-Tweak Start
            foreach (var (reagentId, quantity) in reagents)
            {
                _prototypeManager.TryIndex(reagentId.Prototype, out ReagentPrototype? proto);

                var name = proto?.LocalizedName ?? Loc.GetString("chem-master-window-unknown-reagent-text");
                var reagentColor = proto?.SubstanceColor ?? default(Color);

                var row = BuildReagentRow(
                    reagentColor,
                    rowCount++,
                    name,
                    reagentId,
                    quantity,
                    true,
                    true);
                BufferInfo.Children.Add(row);
            }
        }

        private void BuildContainerUI(Control control, ContainerInfo? info, bool addReagentButtons)
        {
            control.Children.Clear();

            if (info is null)
            {
                control.Children.Add(new Label
                {
                    Text = Loc.GetString("chem-master-window-no-container-loaded-text")
                });
                return;
            }

            // Name of the container and its fill status (Ex: 44/100u)
            control.Children.Add(new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    new Label { Text = $"{info.DisplayName}: " },
                    new Label
                    {
                        Text = $"{info.CurrentVolume}/{info.MaxVolume}",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    }
                }
            });
            // Initialises rowCount to allow for striped rows
            var rowCount = 0;

            // Handle entities if they are not null
            if (info.Entities != null)
            {
                foreach (var (id, quantity) in info.Entities.Select(x => (x.Id, x.Quantity)))
                {
                    control.Children.Add(BuildReagentRow(default(Color), rowCount++, id, default(ReagentId), quantity, false, addReagentButtons));
                }
            }

            // Handle reagents if they are not null
            if (info.Reagents != null)
            {
                foreach (var reagent in info.Reagents)
                {
                    _prototypeManager.TryIndex(reagent.Reagent.Prototype, out ReagentPrototype? proto);
                    var name = proto?.LocalizedName ?? Loc.GetString("chem-master-window-unknown-reagent-text");
                    var reagentColor = proto?.SubstanceColor ?? default(Color);

                    control.Children.Add(BuildReagentRow(reagentColor, rowCount++, name, reagent.Reagent, reagent.Quantity, false, addReagentButtons));
                }
            }
        }
        /// <summary>
        /// Take reagent/entity data and present rows, labels, and buttons appropriately. todo sprites?
        /// </summary>
        private Control BuildReagentRow(Color reagentColor, int rowCount, string name, ReagentId reagent, FixedPoint2 quantity, bool isBuffer, bool addReagentButtons)
        {
            //Colors rows and sets fallback for reagentcolor to the same as background, this will hide colorPanel for entities hopefully
            var rowColor1 = Color.FromHex("#1B1B1E");
            var rowColor2 = Color.FromHex("#202025");
            var currentRowColor = (rowCount % 2 == 1) ? rowColor1 : rowColor2;
            if ((reagentColor == default(Color)) || (!addReagentButtons))
            {
                reagentColor = currentRowColor;
            }
            //this calls the separated button builder, and stores the return to render after labels
            var reagentButtonConstructor = CreateReagentTransferButton(reagent, isBuffer, addReagentButtons);   // ADT-Tweak

            // Create the row layout with the color panel
            var rowContainer = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    new Label { Text = $"{name}: " },
                    new Label
                    {
                        Text = $"{quantity}u",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    },

                    // Padding
                    new Control { HorizontalExpand = true },
                    // Colored panels for reagents
                    new PanelContainer
                    {
                        Name = "colorPanel",
                        VerticalExpand = true,
                        MinWidth = 4,
                        PanelOverride = new StyleBoxFlat
                        {
                            BackgroundColor = reagentColor
                        },
                        Margin = new Thickness(0, 1)
                    }
                }
            };

            // ADT-Tweak Start
            if (reagentButtonConstructor != null)
            {
                if (isBuffer && reagent != default(ReagentId))
                {
                    var chooseReagentButton = new Button()
                    {
                        Text = Loc.GetString("chem-master-window-choose-reagent-button"),
                        StyleClasses = { StyleBase.ButtonSquare },
                        MinSize = new Vector2(60, 0)
                    };

                    if (!string.IsNullOrEmpty(_lastState?.SelectedReagent?.Prototype) && _lastState.SelectedReagent == reagent)
                    {
                        chooseReagentButton.Pressed = true;
                        chooseReagentButton.Modulate = Color.Green;
                    }

                    chooseReagentButton.OnPressed += _ =>
                    {
                        HandleReagentSelection(reagent, chooseReagentButton);
                    };

                    rowContainer.AddChild(chooseReagentButton);
                }

                rowContainer.AddChild(reagentButtonConstructor);
                var transferAllButton = new Button() { Text = Loc.GetString("chem-master-window-buffer-all-amount"), StyleClasses = { StyleBase.ButtonOpenLeft } };
                transferAllButton.OnPressed += _ => OnTransferAllPressed?.Invoke(reagent, isBuffer, IsOutputTab);
                rowContainer.AddChild(transferAllButton);
            }
            // ADT-Tweak End
            //Apply panencontainer to allow for striped rows
            return new PanelContainer
            {
                PanelOverride = new StyleBoxFlat(currentRowColor),
                Children = { rowContainer }
            };
        }

        public string LabelLine
        {
            get => LabelLineEdit.Text;
            set => LabelLineEdit.Text = value;
        }

        public ReagentId? SelectedReagentId => string.IsNullOrEmpty(_lastState?.SelectedReagent?.Prototype)
            ? null
            : _lastState.SelectedReagent;
    }

    public sealed class ReagentButton : Button
    {
        public bool IsBuffer = true;
        public ReagentId Id { get; set; }
        public ReagentButton(string text, ReagentId id, bool isBuffer)
        {
            AddStyleClass(StyleBase.ButtonSquare); // ADT-Tweak
            Text = text;
            Id = id;
            IsBuffer = isBuffer;
        }
    }

    // ADT-Tweak: Sort methods for reagents in buffer and pill buffer
    public enum ReagentSortMethod
    {
        Time,
        Alphabetical,
        Amount
    }
}
