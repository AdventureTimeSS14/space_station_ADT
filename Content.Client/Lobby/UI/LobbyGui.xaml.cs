using Content.Client.Message;
using Content.Client.UserInterface.Systems.EscapeMenu;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration;
using Content.Shared.CCVar;
using Content.Shared.Database;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class LobbyGui : UIScreen
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

        public LobbyGui()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            SetAnchorPreset(MainContainer, LayoutPreset.Wide);
            SetAnchorPreset(Background, LayoutPreset.Wide);
            SetAnchorPreset(ShowInterfaceContainer, LayoutPreset.Wide); // ADT-Tweak
            SetAnchorPreset(ShowInterface, LayoutPreset.BottomLeft); // ADT-Tweak

            LobbySong.SetMarkup(Loc.GetString("lobby-state-song-no-song-text"));

            LeaveButton.OnPressed += _ => _consoleHost.ExecuteCommand("disconnect");
            OptionsButton.OnPressed += _ => UserInterfaceManager.GetUIController<OptionsUIController>().ToggleWindow();
            // ADT-Tweak-Start
            HideInterface.OnPressed += _ => {
                SwitchState(LobbyGuiState.ScreenSaver);
            };
            ShowInterface.OnPressed += _ => {
                SwitchState(LobbyGuiState.Default);
            };
            // ADT-Tweak-End
        }

        public void SwitchState(LobbyGuiState state)
        {
            DefaultState.Visible = false;
            CharacterSetupState.Visible = false;
            // ADT-Tweak-Start
            ShowInterfaceContainer.Visible = false;
            MainContainer.Visible = true;
            // ADT-Tweak-End

            switch (state)
            {
                case LobbyGuiState.Default:
                    DefaultState.Visible = true;
                    RightSide.Visible = true;
                    break;
                case LobbyGuiState.CharacterSetup:
                    CharacterSetupState.Visible = true;

                    var actualWidth = (float) UserInterfaceManager.RootControl.PixelWidth;
                    var setupWidth = (float) LeftSide.PixelWidth;

                    if (1 - (setupWidth / actualWidth) > 0.30)
                    {
                        RightSide.Visible = false;
                    }

                    UserInterfaceManager.GetUIController<LobbyUIController>().ReloadCharacterSetup();

                    break;

                // ADT-Tweak-Start
                case LobbyGuiState.ScreenSaver:
                    ShowInterfaceContainer.Visible = true;
                    MainContainer.Visible = false;
                    break;
            }
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            UpdateButtons();
        }

        private void UpdateButtons()
        {
            // Проверяем статус спонсорки
            var window = new SponsorInfoWindow();
            UpdateSponsorButtonColor(SponsorInfoWindow.HasSponsor);

            // Проверяем статус Discord
            var windowDiscord = new DiscordLincWindow();
            UpdateDiscordLincButtonColor(DiscordLincWindow.HasLinkedDiscord);
        }

        // ADT-Tweak-Start: Покраска кнопок в зависимости от спонсорки и привязки к Discord
        public void UpdateSponsorButtonColor(bool hasSponsor)
        {
            if (SponsorInfoButton == null)
                return;

            SponsorInfoButton.ModulateSelfOverride = hasSponsor
                ? Color.FromHex("#4D88FF") // Синий
                : Color.FromHex("#CC3A3A"); // Красный
        }

        public void UpdateDiscordLincButtonColor(bool hasLincDiscord)
        {
            if (DiscordLincButton == null)
                return;

            DiscordLincButton.ModulateSelfOverride = hasLincDiscord
                ? Color.FromHex("#66FF66") // Зелёный
                : Color.FromHex("#CC3A3A"); // Красный
        }
        // ADT-Tweak-end

        public enum LobbyGuiState : byte
        {
            /// <summary>
            ///  The default state, i.e., what's seen on launch.
            /// </summary>
            Default,
            /// <summary>
            ///  The character setup state.
            /// </summary>
            CharacterSetup,
            ScreenSaver, // ADT-Tweak
        }
    }
}
